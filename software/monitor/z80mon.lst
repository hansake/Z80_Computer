# File z80mon.z80
0000			; z80mon.z80 
0000			; Monitor for home built Z80 computer board 
0000			; can upload files to memory using Xmodem 
0000			; can also test memory, i/o devices and interrupts 
0000			; 
0000			; You are free to use, modify, and redistribute 
0000			; this source code. The software is provided "as is", 
0000			; without warranty of any kind. 
0000			; Hastily Cobbled Together 2021 by Hans-Ake Lund. 
0000			; 
0000			; The monitor program is uploaded from EPROM 
0000			; into high memory and executed there. 
0000			 
0000			; Character definitions 
0000			; 
0000			EOS:		equ 0x00	; End Of String 
0000			CR:		equ 0x0d	; Carriage Return (ENTER) 
0000			LF:		equ 0x0a	; Line Feed 
0000			SPACE:		equ 0x20	; Space 
0000			TAB:		equ 0x09	; Tabulator 
0000			SOH:		equ 0x01	; Xmodem start of header 
0000			EOT:		equ 0x04	; Xmodem end of transfer 
0000			ACK:		equ 0x06	; Xmodem ACK 
0000			NAK:		equ 0x15	; Xmodem NAK 
0000			CTRLC:		equ 0x03	; Control-C 
0000			 
0000			; Serial channel timeout loop counter 
0000			GETCTM:	equ 9000		; loop counter for ~1 sec timeout 
0000			 
0000			; Port definitions for switching between low EPROM and RAM 
0000			MEMEPROM:	equ 0x00 
0000			MEMLORAM:	equ 0x04 
0000			 
0000			; Port definitions for the SIO/0 chip 
0000			SIO_BASE:	equ 0x08 
0000			SIO_A_DATA:	equ SIO_BASE + 0 + 0 
0000			SIO_A_CTRL:	equ SIO_BASE + 0 + 2 
0000			SIO_B_DATA:	equ SIO_BASE + 1 + 0 
0000			SIO_B_CTRL:	equ SIO_BASE + 1 + 2 
0000			 
0000			; Port definitions for the CTC chip 
0000			CTC_BASE:	equ 0x0c 
0000			CTC_CH0:	equ CTC_BASE + 0 
0000			CTC_CH1:	equ CTC_BASE + 1 
0000			CTC_CH2:	equ CTC_BASE + 2 
0000			CTC_CH3:	equ CTC_BASE + 3 
0000			 
0000			; Port definitions for the PIO chip 
0000			PIO_BASE:	equ 0x10 
0000			PIO_A_DATA:	equ PIO_BASE + 0 + 0 
0000			PIO_A_CTRL:	equ PIO_BASE + 0 + 2 
0000			PIO_B_DATA:	equ PIO_BASE + 1 + 0 
0000			PIO_B_CTRL:	equ PIO_BASE + 1 + 2 
0000			 
0000			; Port definitions for switching LED off and on 
0000			LEDOFF:		equ 0x14 
0000			LEDON:		equ 0x18 
0000			 
0000			; The monitor program is copied to high RAM where it is executed 
0000			MONADR:	equ 0xf000 
0000			 
0000			; The EPROM code is executed from here at start or reset 
0000			; if RAM code is uploaded it also starts to run here 
0000			; copying the monitor to upper memory 
0000			boot: 
0000 11 00 f0			ld de, monitor 
0003 21 0e 00			ld hl, moneprom 
0006 01 ac 08			ld bc, monend - monitor 
0009 ed b0			ldir 
000b c3 00 f0			jp monitor 
000e			 
000e			; The monitor program is copied from this address in the EPROM 
000e			; or RAM if uploaded 
000e			moneprom: 
000e			; The program starts here when copied from EPROM at boot 
000e				org MONADR 
f000			monitor: 
f000 c3 49 f0			jp startmon 
f003			 
f003			; Fixed address for reload from EPROM: MONADR + 3 
f003			fixedreload: 
f003 d3 00			out (MEMEPROM), a	; select EPROM in lower 32KB address range 
f005 c3 00 00			jp 0x0000		; and jump to start of EPROM 
f008			 
f008			; Messages to send on serial channels at start and test 
f008			ver_msg: 
f008 ..			        db "Z80 computer board, z80mon version 1.2" 
f02e				include "mbuilt.z80" 
f02e ..			    db ", Built 2021-09-29 16:11" 
# End of file mbuilt.z80
f046 .. 00			db "\r\n", 0 
f049			 
f049			startmon: 
f049 31 00 00			ld sp, 0x0000	; initialize stack pointer 
f04c						; first push or call will use 0xffff 
f04c			 
f04c 3e 01			ld a,1		; one LED blink after initial start 
f04e cd fb f4			call blink 
f051 3e 03			ld a,3 
f053 cd 0b f5			call delay 
f056			 
f056 cd 17 f4			call ctc_init 
f059 3e 02			ld a,2          ; two LED blinks after CTC init 
f05b cd fb f4			call blink 
f05e 3e 03			ld a,3 
f060 cd 0b f5			call delay 
f063			 
f063 cd 3c f4			call sio_init 
f066 3e 03			ld a,3          ; three LED blinks after SIO init 
f068 cd fb f4			call blink 
f06b 3e 03			ld a,3 
f06d cd 0b f5			call delay 
f070			 
f070 cd fe f3			call pio_init 
f073 3e 04			ld a,4          ; four LED blinks after PIO init 
f075 cd fb f4			call blink 
f078 3e 03			ld a,3 
f07a cd 0b f5			call delay 
f07d			 
f07d				; Boot menu 
f07d			 
f07d 3e 00			ld a, 0 
f07f 32 27 f8			ld (xdebug),a  
f082			menu: 
f082 f3				di 
f083			 
f083 3e 00			ld a, 0 
f085 d3 00			out (MEMEPROM), a	; select EPROM in lower 32KB address range 
f087				 
f087 cd 59 f4			call sel_a_sio 
f08a 21 08 f0			ld hl, ver_msg 
f08d cd eb f4			call print_string 
f090 21 cf f0			ld hl, menu_msg 
f093 cd eb f4			call print_string 
f096 cd 9f f4			call getc 
f099 fe 74			cp 't'		;test memory, i/o and interrupt 
f09b ca 49 f5			jp z,testprog 
f09e fe 75			cp 'u'		;upload program to RAM address 0x0000 with Xmodem 
f0a0 ca 60 f1			jp z,upload 
f0a3 fe 72			cp 'r'		;reload from EPROM 
f0a5 ca dc f2			jp z,reload 
f0a8 fe 67			cp 'g'		;run uploaded progran from ARM address 0x0000 
f0aa ca 06 f3			jp z,execute 
f0ad fe 64			cp 'd'		;hidden command to test serial input delay 
f0af ca 77 f3			jp z,cttest 
f0b2 fe 30			cp '0'		;hidden command to turn off x-modem debug (default) 
f0b4 ca bf f0			jp z,xdeboff 
f0b7 fe 31			cp '1'		;hidden command to turn on x-modem debug 
f0b9 ca c7 f0			jp z,xdebon 
f0bc c3 82 f0			jp menu 
f0bf			 
f0bf			xdeboff: 
f0bf 3e 00			ld a, 0 
f0c1 32 27 f8			ld (xdebug),a  
f0c4 c3 82 f0			jp menu 
f0c7			xdebon: 
f0c7 3e 01			ld a, 1 
f0c9 32 27 f8			ld (xdebug),a  
f0cc c3 82 f0			jp menu 
f0cf			 
f0cf			menu_msg: 
f0cf ..				db "Press 't' to start test\r\n" 
f0e8 ..				db "      'u' to upload file to memory\r\n" 
f10c ..				db "      'r' to reload from EPROM\r\n" 
f12c ..				db "      'g' to execute (go) from RAM address 0x0000\r\n" 
f15f 00				db 0 
f160			 
f160			; Upload file to RAM 
f160			upload: 
f160 21 98 f2			ld hl, upload_msg 
f163 cd eb f4			call print_string 
f166 d3 04			out (MEMLORAM),a	; select RAM in lower 32KB address range 
f168			 
f168			; Xmodem recieve file and put in memory 
f168			; protocol description 
f168			;   http://pauillac.inria.fr/~doligez/zmodem/ymodem.txt 
f168			; (much of the code is proudly stolen from PCGET.ASM) 
f168			xupload: 
f168 3a 27 f8			ld a, (xdebug) 
f16b b7				or a 
f16c 28 0f			jr z, xnodebu0 
f16e 3e 0d			ld a, '\r' 
f170 cd f4 f3			call dputc 
f173 3e 0a			ld a, '\n' 
f175 cd f4 f3			call dputc 
f178 3e 30			ld a, '0' 
f17a cd f4 f3			call dputc 
f17d			xnodebu0: 
f17d			 
f17d				; gobble up garbage characters from the line 
f17d			xpurge: 
f17d 06 01			ld b, 1 
f17f cd ab f4			call getct 
f182 38 07			jr c, xrecieve 
f184 fe 03			cp CTRLC		;Ctrl-C was recieved 
f186 ca 8f f2			jp z, xabort 
f189 18 f2			jr xpurge		;loop until sender done 
f18b			 
f18b				; Recieve file and put in memory 
f18b			xrecieve: 
f18b 21 00 00			ld hl, 0x0000		;where to start putting memory in RAM 
f18e 22 28 f8			ld (memptr), hl 
f191			 
f191 3e 00			ld a, 0			;initialize last sector number 
f193 32 2b f8			ld (xlsectno), a 
f196			 
f196 3e 15			ld a, NAK		;send NAK 
f198 cd 91 f4			call putc 
f19b			 
f19b				; Recieve header 
f19b			xgethdr: 
f19b 3a 27 f8			ld a, (xdebug) 
f19e b7				or a 
f19f 28 05			jr z, xnodebu1 
f1a1 3e 31			ld a, '1' 
f1a3 cd f4 f3			call dputc 
f1a6			xnodebu1: 
f1a6 06 03			ld b, 3			;3 seconds timeout 
f1a8 cd ab f4			call getct 
f1ab 30 19			jr nc, xgethchr		;no timeout, identify character in header 
f1ad			 
f1ad				; Header error or timeout 
f1ad				; purge input characters and send NAK 
f1ad			xhdrerr: 
f1ad 3a 27 f8			ld a, (xdebug) 
f1b0 b7				or a 
f1b1 28 05			jr z, xnodebue 
f1b3 3e 65			ld a, 'e' 
f1b5 cd f4 f3			call dputc 
f1b8			xnodebue: 
f1b8 06 01			ld b, 1 
f1ba cd ab f4			call getct 
f1bd 30 ee			jr nc, xhdrerr		;loop until sender done 
f1bf 3e 15			ld a, NAK 
f1c1 cd 91 f4			call putc 
f1c4 18 d5			jr xgethdr		;try to get header again 
f1c6			 
f1c6				; Which type of header? SOH, EOT or Ctrl-C to abort 
f1c6			xgethchr: 
f1c6 fe 01			cp SOH 
f1c8 28 0c			jr z, xgotsoh 
f1ca fe 03			cp CTRLC 
f1cc ca 8f f2			jp z, xabort 
f1cf fe 04			cp EOT 
f1d1 ca 66 f2			jp z, xgoteot 
f1d4 18 d7			jr xhdrerr 
f1d6			 
f1d6				; Got SOH header 
f1d6			xgotsoh: 
f1d6 3a 27 f8			ld a, (xdebug) 
f1d9 b7				or a 
f1da 28 05			jr z, xnodebu2 
f1dc 3e 32			ld a, '2' 
f1de cd f4 f3			call dputc 
f1e1			xnodebu2: 
f1e1			 
f1e1 06 01			ld b, 1 
f1e3 cd ab f4			call getct 
f1e6 38 c5			jr c, xhdrerr 
f1e8 57				ld d, a			;sector number 
f1e9 06 01			ld b, 1 
f1eb cd ab f4			call getct 
f1ee 38 bd			jr c, xhdrerr 
f1f0 2f				cpl			;complement of block number 
f1f1 ba				cp d 
f1f2 28 02			jr z, xgetsec		;good sector header, get sector 
f1f4 18 b7			jr xhdrerr 
f1f6			 
f1f6				; Get sector and put in temporary buffer 
f1f6			xgetsec: 
f1f6 3a 27 f8			ld a, (xdebug) 
f1f9 b7				or a 
f1fa 28 05			jr z, xnodebu3 
f1fc 3e 33			ld a, '3' 
f1fe cd f4 f3			call dputc 
f201			xnodebu3: 
f201			 
f201 7a				ld a, d			 
f202 32 2a f8			ld (xcsectno), a	;current sector 
f205 0e 00			ld c, 0			;init checksum 
f207 21 2c f8			ld hl, xsectbuf		;temporary buffer for uploaded data 
f20a 16 80			ld d, 128		;sector length 
f20c			xgetschar: 
f20c 06 01			ld b, 1 
f20e cd ab f4			call getct 
f211 38 9a			jr c, xhdrerr 
f213 77				ld (hl), a		;store byte in memory 
f214 81				add c			;calculate checksum 
f215 4f				ld c, a 
f216 23				inc hl 
f217 15				dec d 
f218 20 f2			jr nz, xgetschar 
f21a			 
f21a				; Verify the checksum 
f21a 51				ld d, c			;verify checksum 
f21b 06 01			ld b, 1 
f21d cd ab f4			call getct 
f220 38 8b			jr c, xhdrerr 
f222 ba				cp d 
f223 20 88			jr nz, xhdrerr 
f225			 
f225				; Check that this sector number is last sector + 1 
f225 3a 2a f8			ld a, (xcsectno) 
f228 47				ld b, a 
f229 3a 2b f8			ld a, (xlsectno) 
f22c 3c				inc a 
f22d b8				cp b 
f22e 28 0d			jr z, xwrtsec		;expected sector number ok 
f230			 
f230				; sender missed last ACK 
f230 3a 27 f8			ld a, (xdebug) 
f233 b7				or a 
f234 28 05			jr z, xnodebum 
f236 3e 6d			ld a, 'm' 
f238 cd f4 f3			call dputc 
f23b			xnodebum: 
f23b 18 21			jr xsndack 
f23d			 
f23d				; got new sector, write it to memory 
f23d			xwrtsec:	 
f23d 3a 27 f8			ld a, (xdebug) 
f240 b7				or a 
f241 28 05			jr z, xnodebu4 
f243 3e 34			ld a, '4' 
f245 cd f4 f3			call dputc 
f248			xnodebu4: 
f248			 
f248 3a 2a f8			ld a, (xcsectno)	;update sector number 
f24b 32 2b f8			ld (xlsectno), a 
f24e ed 5b 28 f8		ld de, (memptr)		;where to put the uploaded data 
f252 21 2c f8			ld hl, xsectbuf		;from the recieve buffer 
f255 01 80 00			ld bc, 128 
f258			xcpymem: 
f258 ed b0			ldir 
f25a ed 53 28 f8		ld (memptr), de		;update the destination in memory 
f25e			xsndack: 
f25e 3e 06			ld a, ACK		;send ACK 
f260 cd 91 f4			call putc 
f263 c3 9b f1			jp xgethdr		;get next sector 
f266			 
f266				; Got EOT, upload finished 
f266			xgoteot: 
f266 3a 27 f8			ld a, (xdebug) 
f269 b7				or a 
f26a 28 05			jr z, xnodebu5 
f26c 3e 35			ld a, '5' 
f26e cd f4 f3			call dputc 
f271			xnodebu5: 
f271			 
f271 3e 06			ld a, ACK 
f273 cd 91 f4			call putc 
f276			 
f276				; put ok indication in memory 
f276 21 00 f0			ld hl, MONADR 
f279 2b				dec hl 
f27a 3e 4b			ld a, 'K' 
f27c 77				ld (hl), a 
f27d 2b				dec hl 
f27e 3e 4f			ld a, 'O' 
f280 77				ld (hl), a 
f281			 
f281				 
f281				;write message that upload was ok 
f281 3e 03			ld a,3			;wait a while first 
f283 cd 0b f5			call delay 
f286 21 b3 f2			ld hl, upcpl_msg 
f289 cd eb f4			call print_string 
f28c			 
f28c c3 82 f0			jp menu 
f28f			 
f28f			xabort: 
f28f 21 c5 f2			ld hl, uperr_msg	;write message that upload was interrupted 
f292 cd eb f4			call print_string 
f295 c3 82 f0			jp menu 
f298			 
f298			upload_msg: 
f298 .. 00			db "upload file using Xmodem\r\n", 0 
f2b3			 
f2b3			upcpl_msg: 
f2b3 .. 00			db "upload complete\r\n", 0 
f2c5			 
f2c5			uperr_msg: 
f2c5 .. 00			db "\r\nupload interrupted\r\n", 0 
f2dc			 
f2dc			; Reload monitor from EPROM 
f2dc			reload: 
f2dc 21 e5 f2			ld hl, reload_msg 
f2df cd eb f4			call print_string 
f2e2 c3 00 00			jp 0x0000 
f2e5			 
f2e5			reload_msg: 
f2e5 .. 00			db "reloading boot code from EPROM\r\n", 0 
f306			 
f306			; Execute code in RAM 
f306			execute: 
f306 d3 04			out (MEMLORAM),a	; select RAM in lower 32KB address range 
f308 21 00 f0			ld hl, MONADR		; check if is code uploaded 
f30b 2b				dec hl 
f30c 7e				ld a, (hl) 
f30d fe 4b			cp 'K' 
f30f 20 0f			jr nz, noramprog 
f311 2b				dec hl 
f312 7e				ld a, (hl) 
f313 fe 4f			cp 'O' 
f315 20 09			jr nz, noramprog 
f317 21 29 f3			ld hl, execute_msg 
f31a cd eb f4			call print_string 
f31d c3 00 00			jp 0x0000 
f320			noramprog: 
f320 21 55 f3		        ld hl, noramprog_msg 
f323 cd eb f4		        call print_string 
f326 c3 82 f0			jp menu 
f329			 
f329			execute_msg: 
f329 .. 00			db "executing code from address 0x0000 in RAM\r\n", 0 
f355			noramprog_msg: 
f355 .. 00			db "no program code uploaded in RAM\r\n", 0 
f377			 
f377			; Test serial input timeout 
f377			cttest: 
f377 21 a4 f3			ld hl, cttest_msg 
f37a cd eb f4			call print_string 
f37d			 
f37d			;calibrating the timeout 
f37d 0e 30			ld c, '0' 
f37f			tstloop: 
f37f 79				ld a, c 
f380 cd 91 f4			call putc 
f383 3e 2e			ld a, '.' 
f385 cd 91 f4			call putc 
f388 06 0a			ld b,10		;10 seconds timeout 
f38a cd ab f4			call getct 
f38d d2 82 f0			jp nc, menu 
f390 0c				inc c 
f391 79				ld a, c 
f392 fe 3a			cp '9' + 1 
f394 20 e9			jr nz, tstloop 
f396 0e 30			ld c, '0' 
f398 3e 0d			ld a, '\r' 
f39a cd 91 f4			call putc 
f39d 3e 0a			ld a, '\n' 
f39f cd 91 f4			call putc 
f3a2 18 db			jr tstloop 
f3a4			 
f3a4			cttest_msg: 
f3a4 ..				db "testing serial input timeout, 10 sec between dots\r\n" 
f3d7 .. 00			db "press any key to stop test\r\n", 0 
f3f4			 
f3f4			; Debug print character in reg A on channel B 
f3f4			dputc: 
f3f4 cd 66 f4			call sel_b_sio 
f3f7 cd 91 f4			call putc 
f3fa cd 59 f4			call sel_a_sio 
f3fd c9				ret 
f3fe			 
f3fe			; Routines to initialize and use i/o devices 
f3fe			; 
f3fe			; pio_init: initialize PIO channel A and B for output (Mode 0) 
f3fe			; affects: A 
f3fe			pio_init: 
f3fe				;PIO A 
f3fe 3e 0f			ld a, 00001111b		; mode 0 
f400 d3 12			out (PIO_A_CTRL), a 
f402 3e 07			ld a, 00000111b		; int disable 
f404 d3 12			out (PIO_A_CTRL), a 
f406				;PIO B, SPI interface 
f406 3e cf			ld a, 11001111b		; mode 3 
f408 d3 13			out (PIO_B_CTRL), a 
f40a 3e f1			ld a, 11110001b		; i/o mask 
f40c				; bit 0: MISO - input 
f40c				; bit 1: MOSI - output 
f40c				; bit 2: SCK  - output 
f40c				; bit 3: /CS  - output 
f40c				; bit 4 - 7:  - inputs but not used (yet) 
f40c d3 13			out (PIO_B_CTRL), a 
f40e 3e 07			ld a, 00000111b		; int disable 
f410 d3 13			out (PIO_B_CTRL), a 
f412 3e 08			ld a, 00001000b		;initialize output bits 
f414				; bit 1: MOSI - output	;low 
f414				; bit 2: SCK  - output	;low 
f414				; bit 3: /CS  - output	;high = not selected 
f414 d3 11			out (PIO_B_DATA), a 
f416 c9				ret 
f417			 
f417			; Divide constant in CTC to get an approximate baudrate of 9600 
f417			; To get 9600 baud with a 4MHz xtal oscillator the divide constant 
f417			; should be 4000000/(9600*2*16) = 13.0208 
f417			; Using the CTC divider constant set to 13 will give a baud-rate 
f417			; of 4000000/(2*16*13) = 9615 baud which hopefully is close enough. 
f417			; This is tested and works with a 9600 baudrate connection to a Linux PC. 
f417			; 
f417			; (If this is not exact enough, another xtal oscillator must be selected, 
f417			; it should have the frequency: 3.6864 MHz 
f417			; The divide constant will then be set to 12 which gives the baudrate 
f417			; of 3686400/(2*16*12) = 9600 baud.) 
f417			BAUDDIV:	equ 13 
f417			 
f417			; ctc_init: initializes the CTC channel 0 for baudrate clock to SIO/0 
f417			; initializes also CTC channels 1, 2 and 3 
f417			; input TRG0-2 is supplied by the BCLK signal which is the system clock 
f417			; divided by 2 by the ATF22V10C  
f417			; affects: A 
f417			ctc_init: 
f417				; CTC chan 0 
f417 3e 47			ld a, 01000111b		; int off, counter mode, prescaler don't care, 
f419							; falling edge, time trigger don't care, 
f419							; time constant follows, sw reset,  
f419							; this is a ctrl cmd 
f419 d3 0c			out (CTC_CH0), a 
f41b 3e 0d			ld a, BAUDDIV		; divide constant to get baudrate 
f41d d3 0c			out (CTC_CH0), a 
f41f			        ; Interupt vector is written to chan 0 
f41f 3e 10		        ld a, ctciv & 0xf8      ; interupt vector for device 
f421 d3 0c		        out (CTC_CH0), a 
f423			 
f423				; CTC chan 1 
f423 3e 47			ld a, 01000111b		; int off, counter mode, prescaler don't care, 
f425							; falling edge, time trigger don't care, 
f425							; time constant follows, sw reset,  
f425							; this is a ctrl cmd 
f425 d3 0d			out (CTC_CH1), a 
f427 3e 0a			ld a, 10		; divide BCLK by 10 
f429 d3 0d			out (CTC_CH1), a 
f42b			 
f42b				; CTC chan 2 
f42b 3e 47			ld a, 01000111b		; int off, counter mode, prescaler don't care, 
f42d							; falling edge, time trigger don't care, 
f42d							; time constant follows, sw reset,  
f42d							; this is a ctrl cmd 
f42d d3 0e			out (CTC_CH2), a 
f42f 3e 64			ld a, 100		; divide BCLK by 100 
f431 d3 0e			out (CTC_CH2), a 
f433			 
f433			        ; CTC chan 3 setup 
f433 3e b7		        ld a, 10110111b         ; int enabled, timer mode, prescaler 256, 
f435			                                ; rising edge, automatic time trigger, 
f435			                                ; time constant follows, sw reset, 
f435			                                ; this is a ctrl cmd 
f435 d3 0f		        out (CTC_CH3), a 
f437 3e 9c		        ld a, 156                ; divide CLK/(256 * 156) = ~100Hz 
f439 d3 0f		        out (CTC_CH3), a 
f43b			 
f43b c9				ret 
f43c			 
f43c			; sio_init: initializes the SIO/0 for serial communication 
f43c			; affects: HL, B, C 
f43c			sio_init: 
f43c				; load B with number of bytes 
f43c 06 0a			ld b, sio_init_data_end - sio_init_data 
f43e 21 4f f4			ld hl, sio_init_data	; HL points to start of data 
f441 0e 0a			ld c, SIO_A_CTRL	; I/O-port A for write 
f443 ed b3			otir			; block write of B bytes to [C] starting from HL 
f445			 
f445				; load B with number of bytes 
f445 06 0a			ld b, sio_init_data_end - sio_init_data 
f447 21 4f f4			ld hl, sio_init_data	; HL points to start of data 
f44a 0e 0b			ld c, SIO_B_CTRL	; I/O-port B for write 
f44c ed b3			otir			; block write of B bytes to [C] starting from HL 
f44e			 
f44e c9				ret 
f44f			 
f44f			sio_init_data: 
f44f 30				db 00110000b		; write to WR0: error reset 
f450 18				db 00011000b		; write to WR0: channel reset 
f451 04 44			db 0x04, 01000100b	; write to WR4: clkx16, 1 stop bit, no parity 
f453 05 68			db 0x05, 01101000b	; write to WR5: DTR inactive, enable TX 8bit, 
f455							; BREAK off, TX on, RTS inactive 
f455 01 00			db 0x01, 00000000b	; write to WR1: no interrupts enabled 
f457 03 c1			db 0x03, 11000001b	; write to WR3: enable RX 8bit 
f459			sio_init_data_end: 
f459			 
f459			; sel_a_sio: selects SIO channel A for i/o 
f459			; affects: none 
f459			sel_a_sio: 
f459 f5				push af 
f45a 3e 08			ld a, SIO_A_DATA 
f45c 32 1d f8			ld (sio_data), a 
f45f 3e 0a			ld a, SIO_A_CTRL 
f461 32 1c f8			ld (sio_ctrl), a 
f464 f1				pop af 
f465 c9				ret 
f466			 
f466			; sel_b_sio: selects SIO channel B for i/o 
f466			; affects: none 
f466			sel_b_sio: 
f466 f5				push af 
f467 3e 09			ld a, SIO_B_DATA 
f469 32 1d f8			ld (sio_data), a 
f46c 3e 0b			ld a, SIO_B_CTRL 
f46e 32 1c f8			ld (sio_ctrl), a 
f471 f1				pop af 
f472 c9				ret 
f473			 
f473			; tx_ready: waits for transmitt buffer to become empty 
f473			; affects: none 
f473			sio_tx_ready: 
f473 f5				push af 
f474 c5				push bc 
f475			sio_tx_ready_loop: 
f475 3a 1c f8			ld a, (sio_ctrl) 
f478 4f				ld c, a 
f479 ed 78			in a, (c)		; read RR0 
f47b cb 57			bit 2, a		; check if bit 2 is set 
f47d 28 f6			jr z, sio_tx_ready_loop	; if no - check again 
f47f c1				pop bc 
f480 f1				pop af 
f481 c9				ret 
f482			 
f482			; rx_ready: waits for a character to become available 
f482			; affects: none 
f482			sio_rx_ready: 
f482 f5				push af 
f483 c5				push bc 
f484			sio_rx_ready_loop:	 
f484 3a 1c f8			ld a, (sio_ctrl) 
f487 4f				ld c, a 
f488 ed 78			in a, (c)		; read RR0 
f48a cb 47			bit 0, a		; check if bit 0 is set 
f48c 28 f6			jr z, sio_rx_ready_loop	; if no - rx buffer has no data => check again 
f48e c1				pop bc 
f48f f1				pop af 
f490 c9				ret 
f491			 
f491			; sends byte in reg A	 
f491			; affects: none 
f491			putc: 
f491 c5				push bc 
f492 f5				push af 
f493 cd 73 f4			call sio_tx_ready 
f496 3a 1d f8			ld a, (sio_data) 
f499 4f				ld c, a 
f49a f1				pop af 
f49b ed 79			out (c), a		; write character 
f49d c1				pop bc 
f49e c9				ret 
f49f			 
f49f			; getc: waits for a byte to be available and reads it 
f49f			; returns: A - read byte 
f49f			getc: 
f49f c5				push bc 
f4a0 cd 82 f4			call sio_rx_ready	; wait until there is a character 
f4a3 3a 1d f8			ld a, (sio_data) 
f4a6 4f				ld c, a 
f4a7 ed 78			in a, (c)		; read character 
f4a9 c1				pop bc 
f4aa c9				ret 
f4ab			 
f4ab			; getct: waits for a byte to be available with timeout and reads it 
f4ab			; reg B - timeout in seconds 
f4ab			; returns: 
f4ab			;   Carry = 1: timeout, Carry = 0: no timeout 
f4ab			;   reg A - read byte 
f4ab			getct: 
f4ab c5				push bc 
f4ac d5				push de 
f4ad 11 28 23			ld de, GETCTM 
f4b0			getcloop: 
f4b0 3a 1c f8			ld a, (sio_ctrl) 
f4b3 4f				ld c, a 
f4b4 ed 78			in a, (c)		; read RR0 
f4b6 cb 47			bit 0, a		; check if bit 0 is set 
f4b8 20 09			jr nz, getchrin		; character available 
f4ba 1b				dec de 
f4bb 7a				ld a, d 
f4bc b3				or e 
f4bd 20 f1			jr nz, getcloop		; inner loop 
f4bf 10 ef			djnz getcloop		; outer loop, number of seconds 
f4c1 18 0b			jr getcnochr		; timeout 
f4c3			getchrin: 
f4c3 3a 1d f8			ld a, (sio_data) 
f4c6 4f				ld c, a 
f4c7 ed 78			in a, (c)		; read character 
f4c9 d1				pop de 
f4ca c1				pop bc 
f4cb 37				scf 
f4cc 3f				ccf			; Carry = 0, no timeout 
f4cd c9				ret 
f4ce			getcnochr: 
f4ce 3e 00			ld a, 0 
f4d0 d1				pop de 
f4d1 c1				pop bc 
f4d2 37				scf			; Carry = 1, timeout 
f4d3 c9				ret 
f4d4			 
f4d4			; getkey: gets a byte if available and reads it 
f4d4			; returns: A - read byte or 0 if no byte available 
f4d4			getkey: 
f4d4 c5				push bc 
f4d5 3a 1c f8			ld a, (sio_ctrl) 
f4d8 4f				ld c, a 
f4d9 ed 78			in a, (c)		; read RR0 
f4db cb 47			bit 0, a		; check if bit 0 is set 
f4dd 28 08			jr z, no_key		; if no - rx buffer has no data => return 0 
f4df 3a 1d f8			ld a, (sio_data) 
f4e2 4f				ld c, a 
f4e3 ed 78			in a, (c)		; read character 
f4e5 c1				pop bc 
f4e6 c9				ret 
f4e7			no_key: 
f4e7 3e 00			ld a, 0 
f4e9 c1				pop bc 
f4ea c9				ret 
f4eb			 
f4eb			; print_string: prints a string which starts at adress HL 
f4eb			; and is terminated by EOS-character 
f4eb			; affects: none 
f4eb			print_string: 
f4eb f5				push af 
f4ec e5				push hl 
f4ed			print_string_1: 
f4ed 7e				ld a,(hl)		; load next character 
f4ee fe 00			cp 0			; is it en End Of String - character? 
f4f0 28 06			jr z, print_string_2	; yes - return 
f4f2 cd 91 f4			call putc		; no - print character 
f4f5 23				inc hl			; HL++ 
f4f6 18 f5			jr print_string_1	; do it again 
f4f8			print_string_2: 
f4f8 e1				pop hl 
f4f9 f1				pop af 
f4fa c9				ret 
f4fb			 
f4fb			; blink: the blink routine blinks the MEMSEL LED 
f4fb			; the number of times to blink in register A 
f4fb			; Must run in upper 32KB memory 
f4fb			 
f4fb			; Blink LED a number of times 
f4fb			; using: A 
f4fb			blink: 
f4fb 32 22 f8			ld (ledblinks),a 
f4fe			blinkloop: 
f4fe cd 1e f5			call blinkled 
f501 3a 22 f8			ld a,(ledblinks) 
f504 3d				dec a 
f505 32 22 f8			ld (ledblinks),a 
f508 c8				ret z 
f509 18 f3			jr blinkloop 
f50b			 
f50b			; Make delay wait a number of times 
f50b			; using: A 
f50b			delay: 
f50b 32 23 f8			ld (delays),a 
f50e			delayloop: 
f50e cd 31 f5			call bdelay 
f511 cd 31 f5			call bdelay 
f514 3a 23 f8			ld a,(delays) 
f517 3d				dec a 
f518 32 23 f8			ld (delays),a 
f51b c8				ret z 
f51c 18 f0			jr delayloop 
f51e			 
f51e			; Blink LED once 
f51e			blinkled: 
f51e d3 18			out (LEDON), a	; Green LED on 
f520 cd 31 f5			call bdelay 
f523 cd 31 f5			call bdelay 
f526 3e 00			ld a,0 
f528 d3 14			out (LEDOFF),a	; Green LED off 
f52a cd 31 f5			call bdelay 
f52d cd 31 f5			call bdelay 
f530 c9				ret 
f531			 
f531			; Suitable delay for blinking LED and waiting 
f531			bdelay: 
f531 e5				push hl 
f532 21 40 1f			ld hl,8000	; number of loops to delay between blinks 
f535 22 20 f8			ld (loopcnt),hl 
f538			bdelayloop: 
f538 2a 20 f8			ld hl,(loopcnt) 
f53b 2b				dec hl 
f53c 7c				ld a,h 
f53d b5				or l 
f53e ca 47 f5			jp z,bleaveloop 
f541 22 20 f8			ld (loopcnt),hl 
f544 c3 38 f5			jp bdelayloop 
f547			bleaveloop: 
f547 e1				pop hl 
f548 c9				ret 
f549			 
f549			; The test program 
f549			testprog: 
f549 3e 11			ld a, 00010001b	; bit pattern to output on PIO A 
f54b 32 1e f8			ld (pio_out),a  
f54e			 
f54e			; Initialize interupt mode 2 and enable interupt 
f54e ed 5e		        im 2 
f550 3e f8		        ld a, ivblock / 256 
f552 ed 47		        ld i, a 
f554 fb			        ei 
f555			 
f555			; This test loop goes on "forever" 
f555			testloop: 
f555 3e 00		        ld a, 0         ; reset interrupt indicator 
f557 32 26 f8		        ld (gotint), a 
f55a			 
f55a			; test SIO channel A 
f55a cd 59 f4			call sel_a_sio 
f55d 21 08 f0			ld hl, ver_msg 
f560 cd eb f4			call print_string 
f563 21 7a f6			ld hl, tstop_msg 
f566 cd eb f4			call print_string 
f569 21 95 f6			ld hl, a_msg 
f56c cd eb f4			call print_string 
f56f 3e 00			ld a, 0 
f571 32 1f f8			ld (keyin), a 
f574			nxt_a_key: 
f574 cd d4 f4			call getkey	; test if any input character available 
f577 fe 03			cp CTRLC	; end the test 
f579 ca 82 f0			jp z,menu 
f57c b7				or a 
f57d ca 8b f5			jp z, no_more_a_keys 
f580 cd 91 f4			call putc 
f583 3e 01			ld a, 1 
f585 32 1f f8			ld (keyin), a 
f588 c3 74 f5			jp nxt_a_key 
f58b			no_more_a_keys: 
f58b 3a 1f f8			ld a, (keyin) 
f58e b7				or a 
f58f ca 98 f5			jp z, no_a_key 
f592 21 af f6			ld hl, a_in_msg 
f595 cd eb f4			call print_string 
f598			no_a_key: 
f598 3e 05			ld a,5		; five LED blinks after sending on SIO A 
f59a cd fb f4			call blink 
f59d 3e 05			ld a,5 
f59f cd 0b f5			call delay 
f5a2			 
f5a2			; test SIO channel B 
f5a2 cd 66 f4			call sel_b_sio 
f5a5 21 08 f0			ld hl, ver_msg 
f5a8 cd eb f4			call print_string 
f5ab 21 cc f6			ld hl, b_msg 
f5ae cd eb f4			call print_string 
f5b1 3e 00			ld a, 0 
f5b3 32 1f f8			ld (keyin), a 
f5b6			nxt_b_key: 
f5b6 cd d4 f4			call getkey	; test if any input character available 
f5b9 b7				or a 
f5ba ca c8 f5			jp z, no_more_b_keys 
f5bd cd 91 f4			call putc 
f5c0 3e 01			ld a, 1 
f5c2 32 1f f8			ld (keyin), a 
f5c5 c3 b6 f5			jp nxt_b_key 
f5c8			no_more_b_keys: 
f5c8 3a 1f f8			ld a, (keyin) 
f5cb b7				or a 
f5cc ca d5 f5			jp z, no_b_key 
f5cf 21 e6 f6			ld hl, b_in_msg 
f5d2 cd eb f4			call print_string 
f5d5			no_b_key: 
f5d5 3e 06			ld a, 6			; six LED blinks after sending on SIO B 
f5d7 cd fb f4			call blink 
f5da 3e 02			ld a, 2 
f5dc cd 0b f5			call delay 
f5df			 
f5df			; Test RAM 
f5df 21 03 f7			ld hl, ram_tst_start 
f5e2 cd 59 f4			call sel_a_sio 
f5e5 cd eb f4			call print_string 
f5e8 cd 66 f4			call sel_b_sio 
f5eb cd eb f4			call print_string 
f5ee cd 3d f6			call test_ram 
f5f1 21 18 f7			ld hl, ram_tst_ok 
f5f4 3a 24 f8			ld a,(ramerr)		; was there an error? 
f5f7 b7				or a 
f5f8 ca fe f5			jp z, ram_prt	; no error 
f5fb 21 30 f7			ld hl, ram_tst_err 
f5fe			ram_prt: 
f5fe cd 59 f4			call sel_a_sio 
f601 cd eb f4			call print_string 
f604 cd 66 f4			call sel_b_sio 
f607 cd eb f4			call print_string 
f60a 3e 07			ld a, 7			; seven LED blinks after testing RAM 
f60c cd fb f4			call blink 
f60f 3e 02			ld a, 2 
f611 cd 0b f5			call delay 
f614			 
f614			; Test if interupt recieved on SIO A 
f614 cd 59 f4		        call sel_a_sio 
f617 21 6a f7		        ld hl, no_int_msg 
f61a 3a 26 f8		        ld a, (gotint)  ; Interupt recieved? 
f61d b7			        or a 
f61e ca 24 f6		        jp z, prtinta    ; no 
f621 21 4b f7		        ld hl, int_msg 
f624			prtinta: 
f624 cd eb f4		        call print_string 
f627			 
f627			; Test if interupt recieved 
f627 cd 66 f4		        call sel_b_sio 
f62a 21 6a f7		        ld hl, no_int_msg 
f62d 3a 26 f8		        ld a, (gotint)  ; Interupt recieved? 
f630 b7			        or a 
f631 ca 37 f6		        jp z, prtintb    ; no 
f634 21 4b f7		        ld hl, int_msg 
f637			prtintb: 
f637 cd eb f4		        call print_string 
f63a			 
f63a c3 55 f5			jp testloop 
f63d			 
f63d			; test_ram: test RAM memory 
f63d			test_ram: 
f63d 3e 00			ld a, 0			; reset error flag 
f63f 32 24 f8			ld (ramerr), a 
f642 d3 04			out (MEMLORAM), a	; select RAM in lower 32KB address range, LED on 
f644 3e 05			ld a, 5			; test a couple of times 
f646 32 25 f8			ld (tests), a 
f649			tstlop: 
f649 01 00 f0			ld bc, monitor		; end of test: number of bytes to test 
f64c 21 00 00			ld hl, 0x0000		; start address of test 
f64f			tstram: 
f64f 1e 00			ld e, 0x00 
f651 73				ld (hl), e 
f652 7e				ld a, (hl) 
f653 bb				cp e 
f654 ca 5c f6			jp z, tstff 
f657 3e 01			ld a, 1 
f659 32 24 f8			ld (ramerr), a 
f65c			tstff: 
f65c 1e ff			ld e, 0xff 
f65e 73				ld (hl), e 
f65f 7e				ld a, (hl) 
f660 bb				cp e 
f661 ca 69 f6			jp z, tstnxt 
f664 3e 01			ld a, 1 
f666 32 24 f8			ld (ramerr), a 
f669			tstnxt: 
f669 23				inc hl 
f66a 0b				dec bc 
f66b 78				ld a, b 
f66c b1				or c 
f66d 20 e0			jr nz, tstram 
f66f 3a 25 f8			ld a, (tests) 
f672 3d				dec a 
f673 32 25 f8			ld (tests),a 
f676 b7				or a 
f677 20 d0			jr nz, tstlop 
f679 c9				ret 
f67a			 
f67a			; Test messages 
f67a			tstop_msg: 
f67a .. 00			db "press Ctrl-C to end test\r\n", 0 
f695			a_msg: 
f695 .. 00			db "Output on SIO channel A\r\n", 0 
f6af			a_in_msg: 
f6af .. 00			db " <- input on SIO channal A\r\n", 0 
f6cc			b_msg: 
f6cc .. 00			db "Output on SIO channel B\r\n", 0 
f6e6			b_in_msg: 
f6e6 .. 00			db " <- input on SIO channal B\r\n", 0 
f703			ram_tst_start: 
f703 .. 00			db "Testing RAM memory\r\n", 0 
f718			ram_tst_ok: 
f718 .. 00			db "RAM memory test is ok\r\n", 0 
f730			ram_tst_err: 
f730 .. 00			db "Error in RAM memory test\r\n", 0 
f74b			int_msg: 
f74b .. 00		        db "Interrupt from CTC channel 3\r\n", 0 
f76a			no_int_msg: 
f76a .. 00		        db "No interupt from CTC channel 3\r\n", 0 
f78b			 
f78b			; Interupt routines, most are dummies for now 
f78b			; CTC interupts for CH0 - CH2 not used 
f78b			ctcint0: 
f78b			ctcint1: 
f78b			ctcint2: 
f78b			; PIO interrupt routines, not used for now 
f78b			piointa: 
f78b			piointb: 
f78b			; SIO interrupt routines, not used for now 
f78b			siointa: 
f78b			siointb: 
f78b fb			        ei 
f78c ed 4d		        reti 
f78e			 
f78e			; CTC interrupt for CH3 used to test interrupt 
f78e			; sets indicator and outputs bit pattern on PIO ports 
f78e			; then shifts the pattern left 
f78e			ctcint3: 
f78e f5			        push af 
f78f 3e 01		        ld a, 1 
f791 32 26 f8		        ld (gotint), a 
f794 3a 1e f8			ld a, (pio_out) 
f797 d3 10			out (PIO_A_DATA), a 
f799 07				rlca 
f79a 32 1e f8			ld (pio_out), a 
f79d f1			        pop af 
f79e fb			        ei 
f79f ed 4d		        reti 
f7a1			 
f7a1			endofcode: 
f7a1			 
f7a1			; Interupt vectors for interupt mode 2 
f7a1			; make sure that the block is on an even 256 byte address 
f7a1			if endofcode & 0x00ff 
f7a1 0xff...		        ds 256 - (endofcode & 0x00ff), 0xff 
f800			endif 
f800			 
f800			ivblock: 
f800			; 
f800			; The SIO interupt vector block must be on 
f800			; an even 16 byte address if "status affects vector" is used 
f800			 
f800			sioiv: 
f800 8b f7		        dw siointa 
f802 8b f7		        dw siointa 
f804 8b f7		        dw siointa 
f806 8b f7		        dw siointa 
f808 8b f7		        dw siointb 
f80a 8b f7		        dw siointb 
f80c 8b f7		        dw siointb 
f80e 8b f7		        dw siointb 
f810			 
f810			; The CTC interupt vector block must be on 
f810			; an even 8 byte address 
f810			ctciv: 
f810 8b f7		        dw ctcint0 
f812 8b f7		        dw ctcint1 
f814 8b f7		        dw ctcint2 
f816 8e f7		        dw ctcint3 
f818			 
f818			; The PIO interupt vectors must be on 
f818			; an even 2 byte address 
f818			pioaiv: 
f818 8b f7		        dw piointa 
f81a			piobiv: 
f81a 8b f7		        dw piointb 
f81c			 
f81c			; Variables 
f81c			sio_ctrl: 
f81c 00				db 0 
f81d			sio_data: 
f81d 00				db 0 
f81e			pio_out: 
f81e 00				db 0 
f81f			keyin: 
f81f 00				db 0 
f820			loopcnt: 
f820 00 00			dw 0 
f822			ledblinks: 
f822 00				db 0 
f823			delays: 
f823 00				db 0 
f824			ramerr: 
f824 00				db 0 
f825			tests: 
f825 00				db 0 
f826			gotint: 
f826 00			        db 0 
f827			 
f827			xdebug: 
f827 00				db 0 
f828			 
f828			memptr: 
f828 00 00			dw 0 
f82a			 
f82a			xcsectno: 
f82a 00				db 0 
f82b			 
f82b			xlsectno: 
f82b 00				db 0 
f82c			 
f82c			xsectbuf: 
f82c 00...			ds 128 
f8ac			 
f8ac			; End of monitor code 
f8ac			monend: 
# End of file z80mon.z80
f8ac
