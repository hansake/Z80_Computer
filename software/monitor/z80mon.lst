# File z80mon.z80
0000			; z80mon.z80 
0000			; Monitor for home built Z80 computer board 
0000			; can upload files to memory using Xmodem 
0000			; can also test memory, i/o devices and interrupts 
0000			; 
0000			; You are free to use, modify, and redistribute 
0000			; this source code. The software is provided "as is", 
0000			; without warranty of any kind. 
0000			; Hastily Cobbled Together 2021 by Hans-Ake Lund. 
0000			; 
0000			; The monitor program is uploaded from EPROM 
0000			; into high memory and executed there. 
0000			 
0000			; Character definitions 
0000			; 
0000			EOS:		equ 0x00	; End Of String 
0000			CR:		equ 0x0d	; Carriage Return (ENTER) 
0000			LF:		equ 0x0a	; Line Feed 
0000			SPACE:		equ 0x20	; Space 
0000			TAB:		equ 0x09	; Tabulator 
0000			SOH:		equ 0x01	; Xmodem start of header 
0000			EOT:		equ 0x04	; Xmodem end of transfer 
0000			ACK:		equ 0x06	; Xmodem ACK 
0000			NAK:		equ 0x15	; Xmodem NAK 
0000			CTRLC:		equ 0x03	; Control-C 
0000			 
0000			; Serial channel timeout loop counter 
0000			GETCTM:	equ 9000		; loop counter for ~1 sec timeout 
0000			 
0000			; Port definitions for switching between low EPROM and RAM 
0000			MEMEPROM:	equ 0x00 
0000			MEMLORAM:	equ 0x04 
0000			 
0000			; Port definitions for the SIO/0 chip 
0000			SIO_BASE:	equ 0x08 
0000			SIO_A_DATA:	equ SIO_BASE + 0 + 0 
0000			SIO_A_CTRL:	equ SIO_BASE + 0 + 2 
0000			SIO_B_DATA:	equ SIO_BASE + 1 + 0 
0000			SIO_B_CTRL:	equ SIO_BASE + 1 + 2 
0000			 
0000			; Port definitions for the CTC chip 
0000			CTC_BASE:	equ 0x0c 
0000			CTC_CH0:	equ CTC_BASE + 0 
0000			CTC_CH1:	equ CTC_BASE + 1 
0000			CTC_CH2:	equ CTC_BASE + 2 
0000			CTC_CH3:	equ CTC_BASE + 3 
0000			 
0000			; Port definitions for the PIO chip 
0000			PIO_BASE:	equ 0x10 
0000			PIO_A_DATA:	equ PIO_BASE + 0 + 0 
0000			PIO_A_CTRL:	equ PIO_BASE + 0 + 2 
0000			PIO_B_DATA:	equ PIO_BASE + 1 + 0 
0000			PIO_B_CTRL:	equ PIO_BASE + 1 + 2 
0000			 
0000			; Port definitions for switching LED off and on 
0000			LEDOFF:		equ 0x14 
0000			LEDON:		equ 0x18 
0000			 
0000			; The monitor program is copied to high RAM where it is executed 
0000			MONADR:	equ 0xf000 
0000			 
0000			; The EPROM code is executed from here at start or reset 
0000			; if RAM code is uploaded it also starts to run here 
0000			; copying the monitor to upper memory 
0000			boot: 
0000 11 00 f0			ld de, monitor 
0003 21 6f 00			ld hl, moneprom 
0006 01 ac 08			ld bc, monend - monitor 
0009 ed b0			ldir 
000b c3 00 f0			jp monitor 
000e			 
000e			; The NMI routine is on the fixed address 0x0066 
000e			nmipad: 
000e 00...			ds 0x66 - (nmipad - boot) 
0066			nmi: 
0066 08				ex af,af' 
0067 d9				exx 
0068				; do something here if needed 
0068 c3 6b 00			jp nmipatch 
006b			nmipatch: 
006b d9				exx 
006c 08				ex af,af' 
006d ed 45			retn 
006f			nmiend: 
006f			 
006f			; The monitor program is copied from this address in the EPROM 
006f			; or RAM if uploaded 
006f			moneprom: 
006f			; The program starts here when copied from EPROM at boot 
006f				org MONADR 
f000			monitor: 
f000 c3 4d f0			jp startmon 
f003			 
f003			; Fixed address for reload from EPROM: MONADR + 3 
f003			fixedreload: 
f003 3e 03			ld a, 00000011b		; sw reset CTC2 to stop NMIs 
f005 d3 0e			out (CTC_CH2), a 
f007 d3 00			out (MEMEPROM), a	; select EPROM in lower 32KB address range 
f009 c3 00 00			jp 0x0000		; and jump to start of EPROM 
f00c			 
f00c			; Messages to send on serial channels at start and test 
f00c			ver_msg: 
f00c ..			        db "Z80 computer board, z80mon version 1.6" 
f032				include "mbuilt.z80" 
f032 ..			    db ", Built 2021-10-24 17:42" 
# End of file mbuilt.z80
f04a .. 00			db "\r\n", 0 
f04d			 
f04d			startmon: 
f04d 31 00 00			ld sp, 0x0000	; initialize stack pointer 
f050						; first push or call will use 0xffff 
f050			 
f050 3e 01			ld a,1		; one LED blink after initial start 
f052 cd 11 f5			call blink 
f055 3e 03			ld a,3 
f057 cd 21 f5			call delay 
f05a			 
f05a cd 31 f4			call ctc_init 
f05d 3e 02			ld a,2          ; two LED blinks after CTC init 
f05f cd 11 f5			call blink 
f062 3e 03			ld a,3 
f064 cd 21 f5			call delay 
f067			 
f067 cd 52 f4			call sio_init 
f06a 3e 03			ld a,3          ; three LED blinks after SIO init 
f06c cd 11 f5			call blink 
f06f 3e 03			ld a,3 
f071 cd 21 f5			call delay 
f074			 
f074 cd 18 f4			call pio_init 
f077 3e 04			ld a,4          ; four LED blinks after PIO init 
f079 cd 11 f5			call blink 
f07c 3e 03			ld a,3 
f07e cd 21 f5			call delay 
f081			 
f081				; Boot menu 
f081			 
f081 3e 00			ld a, 0 
f083 32 27 f8			ld (xdebug),a  
f086			menu: 
f086 f3				di 
f087			 
f087				; Copy NMI code to RAM also 
f087 21 66 00			ld hl, nmi 
f08a 11 ac f8			ld de, monend 
f08d 01 09 00			ld bc, nmiend - nmi 
f090 ed b0			ldir 
f092 d3 04			out (MEMLORAM),a	; select RAM in lower 32KB address range 
f094 21 ac f8			ld hl, monend 
f097 11 66 00			ld de, nmi 
f09a 01 09 00			ld bc, nmiend - nmi 
f09d ed b0			ldir 
f09f			 
f09f cd 6f f4			call sel_a_sio 
f0a2 21 0c f0			ld hl, ver_msg 
f0a5 cd 01 f5			call print_string 
f0a8 21 e7 f0			ld hl, menu_msg 
f0ab cd 01 f5			call print_string 
f0ae cd b5 f4			call getc 
f0b1 fe 74			cp 't'		;test memory, i/o and interrupt 
f0b3 ca 5f f5			jp z,testprog 
f0b6 fe 75			cp 'u'		;upload program to RAM address 0x0000 with Xmodem 
f0b8 ca 78 f1			jp z,upload 
f0bb fe 72			cp 'r'		;reload from EPROM 
f0bd ca f4 f2			jp z,reload 
f0c0 fe 67			cp 'g'		;run uploaded progran from ARM address 0x0000 
f0c2 ca 20 f3			jp z,execute 
f0c5 fe 64			cp 'd'		;hidden command to test serial input delay 
f0c7 ca 91 f3			jp z,cttest 
f0ca fe 30			cp '0'		;hidden command to turn off x-modem debug (default) 
f0cc ca d7 f0			jp z,xdeboff 
f0cf fe 31			cp '1'		;hidden command to turn on x-modem debug 
f0d1 ca df f0			jp z,xdebon 
f0d4 c3 86 f0			jp menu 
f0d7			 
f0d7			xdeboff: 
f0d7 3e 00			ld a, 0 
f0d9 32 27 f8			ld (xdebug),a  
f0dc c3 86 f0			jp menu 
f0df			xdebon: 
f0df 3e 01			ld a, 1 
f0e1 32 27 f8			ld (xdebug),a  
f0e4 c3 86 f0			jp menu 
f0e7			 
f0e7			menu_msg: 
f0e7 ..				db "Press 't' to start test\r\n" 
f100 ..				db "      'u' to upload file to memory\r\n" 
f124 ..				db "      'r' to reload from EPROM\r\n" 
f144 ..				db "      'g' to execute (go) from RAM address 0x0000\r\n" 
f177 00				db 0 
f178			 
f178			; Upload file to RAM 
f178			upload: 
f178 21 b0 f2			ld hl, upload_msg 
f17b cd 01 f5			call print_string 
f17e				 
f17e d3 04			out (MEMLORAM),a	; select RAM in lower 32KB address range 
f180			 
f180			; Xmodem recieve file and put in memory 
f180			; protocol description 
f180			;   http://pauillac.inria.fr/~doligez/zmodem/ymodem.txt 
f180			; (much of the code is proudly stolen from PCGET.ASM) 
f180			xupload: 
f180 3a 27 f8			ld a, (xdebug) 
f183 b7				or a 
f184 28 0f			jr z, xnodebu0 
f186 3e 0d			ld a, '\r' 
f188 cd 0e f4			call dputc 
f18b 3e 0a			ld a, '\n' 
f18d cd 0e f4			call dputc 
f190 3e 30			ld a, '0' 
f192 cd 0e f4			call dputc 
f195			xnodebu0: 
f195			 
f195				; gobble up garbage characters from the line 
f195			xpurge: 
f195 06 01			ld b, 1 
f197 cd c1 f4			call getct 
f19a 38 07			jr c, xrecieve 
f19c fe 03			cp CTRLC		;Ctrl-C was recieved 
f19e ca a7 f2			jp z, xabort 
f1a1 18 f2			jr xpurge		;loop until sender done 
f1a3			 
f1a3				; Recieve file and put in memory 
f1a3			xrecieve: 
f1a3 21 00 00			ld hl, 0x0000		;where to start putting memory in RAM 
f1a6 22 28 f8			ld (memptr), hl 
f1a9			 
f1a9 3e 00			ld a, 0			;initialize last sector number 
f1ab 32 2b f8			ld (xlsectno), a 
f1ae			 
f1ae 3e 15			ld a, NAK		;send NAK 
f1b0 cd a7 f4			call putc 
f1b3			 
f1b3				; Recieve header 
f1b3			xgethdr: 
f1b3 3a 27 f8			ld a, (xdebug) 
f1b6 b7				or a 
f1b7 28 05			jr z, xnodebu1 
f1b9 3e 31			ld a, '1' 
f1bb cd 0e f4			call dputc 
f1be			xnodebu1: 
f1be 06 03			ld b, 3			;3 seconds timeout 
f1c0 cd c1 f4			call getct 
f1c3 30 19			jr nc, xgethchr		;no timeout, identify character in header 
f1c5			 
f1c5				; Header error or timeout 
f1c5				; purge input characters and send NAK 
f1c5			xhdrerr: 
f1c5 3a 27 f8			ld a, (xdebug) 
f1c8 b7				or a 
f1c9 28 05			jr z, xnodebue 
f1cb 3e 65			ld a, 'e' 
f1cd cd 0e f4			call dputc 
f1d0			xnodebue: 
f1d0 06 01			ld b, 1 
f1d2 cd c1 f4			call getct 
f1d5 30 ee			jr nc, xhdrerr		;loop until sender done 
f1d7 3e 15			ld a, NAK 
f1d9 cd a7 f4			call putc 
f1dc 18 d5			jr xgethdr		;try to get header again 
f1de			 
f1de				; Which type of header? SOH, EOT or Ctrl-C to abort 
f1de			xgethchr: 
f1de fe 01			cp SOH 
f1e0 28 0c			jr z, xgotsoh 
f1e2 fe 03			cp CTRLC 
f1e4 ca a7 f2			jp z, xabort 
f1e7 fe 04			cp EOT 
f1e9 ca 7e f2			jp z, xgoteot 
f1ec 18 d7			jr xhdrerr 
f1ee			 
f1ee				; Got SOH header 
f1ee			xgotsoh: 
f1ee 3a 27 f8			ld a, (xdebug) 
f1f1 b7				or a 
f1f2 28 05			jr z, xnodebu2 
f1f4 3e 32			ld a, '2' 
f1f6 cd 0e f4			call dputc 
f1f9			xnodebu2: 
f1f9			 
f1f9 06 01			ld b, 1 
f1fb cd c1 f4			call getct 
f1fe 38 c5			jr c, xhdrerr 
f200 57				ld d, a			;sector number 
f201 06 01			ld b, 1 
f203 cd c1 f4			call getct 
f206 38 bd			jr c, xhdrerr 
f208 2f				cpl			;complement of block number 
f209 ba				cp d 
f20a 28 02			jr z, xgetsec		;good sector header, get sector 
f20c 18 b7			jr xhdrerr 
f20e			 
f20e				; Get sector and put in temporary buffer 
f20e			xgetsec: 
f20e 3a 27 f8			ld a, (xdebug) 
f211 b7				or a 
f212 28 05			jr z, xnodebu3 
f214 3e 33			ld a, '3' 
f216 cd 0e f4			call dputc 
f219			xnodebu3: 
f219			 
f219 7a				ld a, d			 
f21a 32 2a f8			ld (xcsectno), a	;current sector 
f21d 0e 00			ld c, 0			;init checksum 
f21f 21 2c f8			ld hl, xsectbuf		;temporary buffer for uploaded data 
f222 16 80			ld d, 128		;sector length 
f224			xgetschar: 
f224 06 01			ld b, 1 
f226 cd c1 f4			call getct 
f229 38 9a			jr c, xhdrerr 
f22b 77				ld (hl), a		;store byte in memory 
f22c 81				add c			;calculate checksum 
f22d 4f				ld c, a 
f22e 23				inc hl 
f22f 15				dec d 
f230 20 f2			jr nz, xgetschar 
f232			 
f232				; Verify the checksum 
f232 51				ld d, c			;verify checksum 
f233 06 01			ld b, 1 
f235 cd c1 f4			call getct 
f238 38 8b			jr c, xhdrerr 
f23a ba				cp d 
f23b 20 88			jr nz, xhdrerr 
f23d			 
f23d				; Check that this sector number is last sector + 1 
f23d 3a 2a f8			ld a, (xcsectno) 
f240 47				ld b, a 
f241 3a 2b f8			ld a, (xlsectno) 
f244 3c				inc a 
f245 b8				cp b 
f246 28 0d			jr z, xwrtsec		;expected sector number ok 
f248			 
f248				; sender missed last ACK 
f248 3a 27 f8			ld a, (xdebug) 
f24b b7				or a 
f24c 28 05			jr z, xnodebum 
f24e 3e 6d			ld a, 'm' 
f250 cd 0e f4			call dputc 
f253			xnodebum: 
f253 18 21			jr xsndack 
f255			 
f255				; got new sector, write it to memory 
f255			xwrtsec:	 
f255 3a 27 f8			ld a, (xdebug) 
f258 b7				or a 
f259 28 05			jr z, xnodebu4 
f25b 3e 34			ld a, '4' 
f25d cd 0e f4			call dputc 
f260			xnodebu4: 
f260			 
f260 3a 2a f8			ld a, (xcsectno)	;update sector number 
f263 32 2b f8			ld (xlsectno), a 
f266 ed 5b 28 f8		ld de, (memptr)		;where to put the uploaded data 
f26a 21 2c f8			ld hl, xsectbuf		;from the recieve buffer 
f26d 01 80 00			ld bc, 128 
f270			xcpymem: 
f270 ed b0			ldir 
f272 ed 53 28 f8		ld (memptr), de		;update the destination in memory 
f276			xsndack: 
f276 3e 06			ld a, ACK		;send ACK 
f278 cd a7 f4			call putc 
f27b c3 b3 f1			jp xgethdr		;get next sector 
f27e			 
f27e				; Got EOT, upload finished 
f27e			xgoteot: 
f27e 3a 27 f8			ld a, (xdebug) 
f281 b7				or a 
f282 28 05			jr z, xnodebu5 
f284 3e 35			ld a, '5' 
f286 cd 0e f4			call dputc 
f289			xnodebu5: 
f289			 
f289 3e 06			ld a, ACK 
f28b cd a7 f4			call putc 
f28e			 
f28e				; put ok indication in memory 
f28e 21 00 f0			ld hl, MONADR 
f291 2b				dec hl 
f292 3e 4b			ld a, 'K' 
f294 77				ld (hl), a 
f295 2b				dec hl 
f296 3e 4f			ld a, 'O' 
f298 77				ld (hl), a 
f299				 
f299				;write message that upload was ok 
f299 3e 03			ld a,3			;wait a while first 
f29b cd 21 f5			call delay 
f29e 21 cb f2			ld hl, upcpl_msg 
f2a1 cd 01 f5			call print_string 
f2a4			 
f2a4 c3 86 f0			jp menu 
f2a7			 
f2a7			xabort: 
f2a7 21 dd f2			ld hl, uperr_msg	;write message that upload was interrupted 
f2aa cd 01 f5			call print_string 
f2ad c3 86 f0			jp menu 
f2b0			 
f2b0			upload_msg: 
f2b0 .. 00			db "upload file using Xmodem\r\n", 0 
f2cb			 
f2cb			upcpl_msg: 
f2cb .. 00			db "upload complete\r\n", 0 
f2dd			 
f2dd			uperr_msg: 
f2dd .. 00			db "\r\nupload interrupted\r\n", 0 
f2f4			 
f2f4			; Reload monitor from EPROM 
f2f4			reload: 
f2f4 21 ff f2			ld hl, reload_msg 
f2f7 cd 01 f5			call print_string 
f2fa d3 00			out (MEMEPROM), a	; select EPROM in lower 32KB address range 
f2fc c3 00 00			jp 0x0000 
f2ff			 
f2ff			reload_msg: 
f2ff .. 00			db "reloading boot code from EPROM\r\n", 0 
f320			 
f320			; Execute code in RAM 
f320			execute: 
f320 d3 04			out (MEMLORAM),a	; select RAM in lower 32KB address range 
f322 21 00 f0			ld hl, MONADR		; check if is code uploaded 
f325 2b				dec hl 
f326 7e				ld a, (hl) 
f327 fe 4b			cp 'K' 
f329 20 0f			jr nz, noramprog 
f32b 2b				dec hl 
f32c 7e				ld a, (hl) 
f32d fe 4f			cp 'O' 
f32f 20 09			jr nz, noramprog 
f331 21 43 f3			ld hl, execute_msg 
f334 cd 01 f5			call print_string 
f337 c3 00 00			jp 0x0000 
f33a			noramprog: 
f33a 21 6f f3		        ld hl, noramprog_msg 
f33d cd 01 f5		        call print_string 
f340 c3 86 f0			jp menu 
f343			 
f343			execute_msg: 
f343 .. 00			db "executing code from address 0x0000 in RAM\r\n", 0 
f36f			noramprog_msg: 
f36f .. 00			db "no program code uploaded in RAM\r\n", 0 
f391			 
f391			; Test serial input timeout 
f391			cttest: 
f391 21 be f3			ld hl, cttest_msg 
f394 cd 01 f5			call print_string 
f397			 
f397			;calibrating the timeout 
f397 0e 30			ld c, '0' 
f399			tstloop: 
f399 79				ld a, c 
f39a cd a7 f4			call putc 
f39d 3e 2e			ld a, '.' 
f39f cd a7 f4			call putc 
f3a2 06 0a			ld b,10		;10 seconds timeout 
f3a4 cd c1 f4			call getct 
f3a7 d2 86 f0			jp nc, menu 
f3aa 0c				inc c 
f3ab 79				ld a, c 
f3ac fe 3a			cp '9' + 1 
f3ae 20 e9			jr nz, tstloop 
f3b0 0e 30			ld c, '0' 
f3b2 3e 0d			ld a, '\r' 
f3b4 cd a7 f4			call putc 
f3b7 3e 0a			ld a, '\n' 
f3b9 cd a7 f4			call putc 
f3bc 18 db			jr tstloop 
f3be			 
f3be			cttest_msg: 
f3be ..				db "testing serial input timeout, 10 sec between dots\r\n" 
f3f1 .. 00			db "press any key to stop test\r\n", 0 
f40e			 
f40e			; Debug print character in reg A on channel B 
f40e			dputc: 
f40e cd 7c f4			call sel_b_sio 
f411 cd a7 f4			call putc 
f414 cd 6f f4			call sel_a_sio 
f417 c9				ret 
f418			 
f418			; Routines to initialize and use i/o devices 
f418			; 
f418			; pio_init: initialize PIO channel A and B for output (Mode 0) 
f418			; affects: A 
f418			pio_init: 
f418				;PIO A 
f418 3e 0f			ld a, 00001111b		; mode 0 
f41a d3 12			out (PIO_A_CTRL), a 
f41c 3e 07			ld a, 00000111b		; int disable 
f41e d3 12			out (PIO_A_CTRL), a 
f420				;PIO B, SPI interface 
f420 3e cf			ld a, 11001111b		; mode 3 
f422 d3 13			out (PIO_B_CTRL), a 
f424 3e 01			ld a, 00000001b		; i/o mask 
f426				;bit 0: MISO - input     3                   3 
f426				;bit 1: MOSI - output    4                   5 
f426				;bit 2: SCK  - output    5                   7 
f426				;bit 3: /CS0 - output    6                   9 
f426				;bit 4: /CS1 - output  extra device select  11 
f426				;bit 5: /CS2 - output  extra device select  10 
f426				;bit 6: TP1  - output  test point            8  (used to measure NMI handling time) 
f426				;bit 7: TRA  - output  byte in transfer      6   signals that NMI routine is active 
f426				;                                                with an 8 bit transmit or receive transfer 
f426 d3 13			out (PIO_B_CTRL), a 
f428 3e 07			ld a, 00000111b		; int disable 
f42a d3 13			out (PIO_B_CTRL), a 
f42c 3e 3a			ld a, 00111010b		;initialize output bits 
f42e				; bit 1: MOSI - output	;low 
f42e				; bit 2: SCK  - output	;low 
f42e				; bit 3: /CS0 - output	;high = not selected 
f42e				; bit 4: /CS1 - output	;high = not selected 
f42e				; bit 5: /CS2 - output	;high = not selected 
f42e				; bit 6: TP1  - output  ;low 
f42e				; bit 7: TRA  - output  ;low 
f42e d3 11			out (PIO_B_DATA), a 
f430 c9				ret 
f431			 
f431			; Divide constant in CTC to get an approximate baudrate of 9600 
f431			; To get 9600 baud with a 4MHz xtal oscillator the divide constant 
f431			; should be 4000000/(9600*2*16) = 13.0208 
f431			; Using the CTC divider constant set to 13 will give a baud-rate 
f431			; of 4000000/(2*16*13) = 9615 baud which hopefully is close enough. 
f431			; This is tested and works with a 9600 baudrate connection to a Linux PC. 
f431			; 
f431			; (If this is not exact enough, another xtal oscillator must be selected, 
f431			; it should have the frequency: 3.6864 MHz 
f431			; The divide constant will then be set to 12 which gives the baudrate 
f431			; of 3686400/(2*16*12) = 9600 baud.) 
f431			BAUDDIV:	equ 13 
f431			 
f431			; ctc_init: initializes the CTC channel 0 for baudrate clock to SIO/0 
f431			; initializes also CTC channels 1, 2 and 3 
f431			; input TRG0-2 is supplied by the BCLK signal which is the system clock 
f431			; divided by 2 by the ATF22V10C  
f431			; affects: A 
f431			ctc_init: 
f431				; CTC chan 0 
f431 3e 47			ld a, 01000111b		; int off, counter mode, prescaler don't care, 
f433							; falling edge, time trigger don't care, 
f433							; time constant follows, sw reset,  
f433							; this is a ctrl cmd 
f433 d3 0c			out (CTC_CH0), a 
f435 3e 0d			ld a, BAUDDIV		; divide constant to get baudrate 
f437 d3 0c			out (CTC_CH0), a 
f439			        ; Interupt vector is written to chan 0 
f439 3e 10		        ld a, ctciv & 0xf8      ; interupt vector for device 
f43b d3 0c		        out (CTC_CH0), a 
f43d			 
f43d				; CTC chan 1 
f43d 3e 47			ld a, 01000111b		; int off, counter mode, prescaler don't care, 
f43f							; falling edge, time trigger don't care, 
f43f							; time constant follows, sw reset,  
f43f							; this is a ctrl cmd 
f43f d3 0d			out (CTC_CH1), a 
f441 3e 0a			ld a, 10		; divide BCLK by 10 
f443 d3 0d			out (CTC_CH1), a 
f445			 
f445				; CTC chan 2 
f445 3e 03			ld a, 00000011b		; sw reset, this is a ctrl cmd 
f447 d3 0e			out (CTC_CH2), a 
f449			 
f449			        ; CTC chan 3 setup 
f449 3e b7		        ld a, 10110111b         ; int enabled, timer mode, prescaler 256, 
f44b			                                ; rising edge, automatic time trigger, 
f44b			                                ; time constant follows, sw reset, 
f44b			                                ; this is a ctrl cmd 
f44b d3 0f		        out (CTC_CH3), a 
f44d 3e 9c		        ld a, 156                ; divide CLK/(256 * 156) = ~100Hz 
f44f d3 0f		        out (CTC_CH3), a 
f451			 
f451 c9				ret 
f452			 
f452			; sio_init: initializes the SIO/0 for serial communication 
f452			; affects: HL, B, C 
f452			sio_init: 
f452				; load B with number of bytes 
f452 06 0a			ld b, sio_init_data_end - sio_init_data 
f454 21 65 f4			ld hl, sio_init_data	; HL points to start of data 
f457 0e 0a			ld c, SIO_A_CTRL	; I/O-port A for write 
f459 ed b3			otir			; block write of B bytes to [C] starting from HL 
f45b			 
f45b				; load B with number of bytes 
f45b 06 0a			ld b, sio_init_data_end - sio_init_data 
f45d 21 65 f4			ld hl, sio_init_data	; HL points to start of data 
f460 0e 0b			ld c, SIO_B_CTRL	; I/O-port B for write 
f462 ed b3			otir			; block write of B bytes to [C] starting from HL 
f464			 
f464 c9				ret 
f465			 
f465			sio_init_data: 
f465 30				db 00110000b		; write to WR0: error reset 
f466 18				db 00011000b		; write to WR0: channel reset 
f467 04 44			db 0x04, 01000100b	; write to WR4: clkx16, 1 stop bit, no parity 
f469 05 68			db 0x05, 01101000b	; write to WR5: DTR inactive, enable TX 8bit, 
f46b							; BREAK off, TX on, RTS inactive 
f46b 01 00			db 0x01, 00000000b	; write to WR1: no interrupts enabled 
f46d 03 c1			db 0x03, 11000001b	; write to WR3: enable RX 8bit 
f46f			sio_init_data_end: 
f46f			 
f46f			; sel_a_sio: selects SIO channel A for i/o 
f46f			; affects: none 
f46f			sel_a_sio: 
f46f f5				push af 
f470 3e 08			ld a, SIO_A_DATA 
f472 32 1d f8			ld (sio_data), a 
f475 3e 0a			ld a, SIO_A_CTRL 
f477 32 1c f8			ld (sio_ctrl), a 
f47a f1				pop af 
f47b c9				ret 
f47c			 
f47c			; sel_b_sio: selects SIO channel B for i/o 
f47c			; affects: none 
f47c			sel_b_sio: 
f47c f5				push af 
f47d 3e 09			ld a, SIO_B_DATA 
f47f 32 1d f8			ld (sio_data), a 
f482 3e 0b			ld a, SIO_B_CTRL 
f484 32 1c f8			ld (sio_ctrl), a 
f487 f1				pop af 
f488 c9				ret 
f489			 
f489			; tx_ready: waits for transmitt buffer to become empty 
f489			; affects: none 
f489			sio_tx_ready: 
f489 f5				push af 
f48a c5				push bc 
f48b			sio_tx_ready_loop: 
f48b 3a 1c f8			ld a, (sio_ctrl) 
f48e 4f				ld c, a 
f48f ed 78			in a, (c)		; read RR0 
f491 cb 57			bit 2, a		; check if bit 2 is set 
f493 28 f6			jr z, sio_tx_ready_loop	; if no - check again 
f495 c1				pop bc 
f496 f1				pop af 
f497 c9				ret 
f498			 
f498			; rx_ready: waits for a character to become available 
f498			; affects: none 
f498			sio_rx_ready: 
f498 f5				push af 
f499 c5				push bc 
f49a			sio_rx_ready_loop:	 
f49a 3a 1c f8			ld a, (sio_ctrl) 
f49d 4f				ld c, a 
f49e ed 78			in a, (c)		; read RR0 
f4a0 cb 47			bit 0, a		; check if bit 0 is set 
f4a2 28 f6			jr z, sio_rx_ready_loop	; if no - rx buffer has no data => check again 
f4a4 c1				pop bc 
f4a5 f1				pop af 
f4a6 c9				ret 
f4a7			 
f4a7			; sends byte in reg A	 
f4a7			; affects: none 
f4a7			putc: 
f4a7 c5				push bc 
f4a8 f5				push af 
f4a9 cd 89 f4			call sio_tx_ready 
f4ac 3a 1d f8			ld a, (sio_data) 
f4af 4f				ld c, a 
f4b0 f1				pop af 
f4b1 ed 79			out (c), a		; write character 
f4b3 c1				pop bc 
f4b4 c9				ret 
f4b5			 
f4b5			; getc: waits for a byte to be available and reads it 
f4b5			; returns: A - read byte 
f4b5			getc: 
f4b5 c5				push bc 
f4b6 cd 98 f4			call sio_rx_ready	; wait until there is a character 
f4b9 3a 1d f8			ld a, (sio_data) 
f4bc 4f				ld c, a 
f4bd ed 78			in a, (c)		; read character 
f4bf c1				pop bc 
f4c0 c9				ret 
f4c1			 
f4c1			; getct: waits for a byte to be available with timeout and reads it 
f4c1			; reg B - timeout in seconds 
f4c1			; returns: 
f4c1			;   Carry = 1: timeout, Carry = 0: no timeout 
f4c1			;   reg A - read byte 
f4c1			getct: 
f4c1 c5				push bc 
f4c2 d5				push de 
f4c3 11 28 23			ld de, GETCTM 
f4c6			getcloop: 
f4c6 3a 1c f8			ld a, (sio_ctrl) 
f4c9 4f				ld c, a 
f4ca ed 78			in a, (c)		; read RR0 
f4cc cb 47			bit 0, a		; check if bit 0 is set 
f4ce 20 09			jr nz, getchrin		; character available 
f4d0 1b				dec de 
f4d1 7a				ld a, d 
f4d2 b3				or e 
f4d3 20 f1			jr nz, getcloop		; inner loop 
f4d5 10 ef			djnz getcloop		; outer loop, number of seconds 
f4d7 18 0b			jr getcnochr		; timeout 
f4d9			getchrin: 
f4d9 3a 1d f8			ld a, (sio_data) 
f4dc 4f				ld c, a 
f4dd ed 78			in a, (c)		; read character 
f4df d1				pop de 
f4e0 c1				pop bc 
f4e1 37				scf 
f4e2 3f				ccf			; Carry = 0, no timeout 
f4e3 c9				ret 
f4e4			getcnochr: 
f4e4 3e 00			ld a, 0 
f4e6 d1				pop de 
f4e7 c1				pop bc 
f4e8 37				scf			; Carry = 1, timeout 
f4e9 c9				ret 
f4ea			 
f4ea			; getkey: gets a byte if available and reads it 
f4ea			; returns: A - read byte or 0 if no byte available 
f4ea			getkey: 
f4ea c5				push bc 
f4eb 3a 1c f8			ld a, (sio_ctrl) 
f4ee 4f				ld c, a 
f4ef ed 78			in a, (c)		; read RR0 
f4f1 cb 47			bit 0, a		; check if bit 0 is set 
f4f3 28 08			jr z, no_key		; if no - rx buffer has no data => return 0 
f4f5 3a 1d f8			ld a, (sio_data) 
f4f8 4f				ld c, a 
f4f9 ed 78			in a, (c)		; read character 
f4fb c1				pop bc 
f4fc c9				ret 
f4fd			no_key: 
f4fd 3e 00			ld a, 0 
f4ff c1				pop bc 
f500 c9				ret 
f501			 
f501			; print_string: prints a string which starts at adress HL 
f501			; and is terminated by EOS-character 
f501			; affects: none 
f501			print_string: 
f501 f5				push af 
f502 e5				push hl 
f503			print_string_1: 
f503 7e				ld a,(hl)		; load next character 
f504 fe 00			cp 0			; is it en End Of String - character? 
f506 28 06			jr z, print_string_2	; yes - return 
f508 cd a7 f4			call putc		; no - print character 
f50b 23				inc hl			; HL++ 
f50c 18 f5			jr print_string_1	; do it again 
f50e			print_string_2: 
f50e e1				pop hl 
f50f f1				pop af 
f510 c9				ret 
f511			 
f511			; blink: the blink routine blinks the MEMSEL LED 
f511			; the number of times to blink in register A 
f511			; Must run in upper 32KB memory 
f511			 
f511			; Blink LED a number of times 
f511			; using: A 
f511			blink: 
f511 32 22 f8			ld (ledblinks),a 
f514			blinkloop: 
f514 cd 34 f5			call blinkled 
f517 3a 22 f8			ld a,(ledblinks) 
f51a 3d				dec a 
f51b 32 22 f8			ld (ledblinks),a 
f51e c8				ret z 
f51f 18 f3			jr blinkloop 
f521			 
f521			; Make delay wait a number of times 
f521			; using: A 
f521			delay: 
f521 32 23 f8			ld (delays),a 
f524			delayloop: 
f524 cd 47 f5			call bdelay 
f527 cd 47 f5			call bdelay 
f52a 3a 23 f8			ld a,(delays) 
f52d 3d				dec a 
f52e 32 23 f8			ld (delays),a 
f531 c8				ret z 
f532 18 f0			jr delayloop 
f534			 
f534			; Blink LED once 
f534			blinkled: 
f534 d3 18			out (LEDON), a	; Green LED on 
f536 cd 47 f5			call bdelay 
f539 cd 47 f5			call bdelay 
f53c 3e 00			ld a,0 
f53e d3 14			out (LEDOFF),a	; Green LED off 
f540 cd 47 f5			call bdelay 
f543 cd 47 f5			call bdelay 
f546 c9				ret 
f547			 
f547			; Suitable delay for blinking LED and waiting 
f547			bdelay: 
f547 e5				push hl 
f548 21 40 1f			ld hl,8000	; number of loops to delay between blinks 
f54b 22 20 f8			ld (loopcnt),hl 
f54e			bdelayloop: 
f54e 2a 20 f8			ld hl,(loopcnt) 
f551 2b				dec hl 
f552 7c				ld a,h 
f553 b5				or l 
f554 ca 5d f5			jp z,bleaveloop 
f557 22 20 f8			ld (loopcnt),hl 
f55a c3 4e f5			jp bdelayloop 
f55d			bleaveloop: 
f55d e1				pop hl 
f55e c9				ret 
f55f			 
f55f			; The test program 
f55f			testprog: 
f55f 3e 11			ld a, 00010001b	; bit pattern to output on PIO A 
f561 32 1e f8			ld (pio_out),a  
f564			 
f564			; Initialize interupt mode 2 and enable interupt 
f564 ed 5e		        im 2 
f566 3e f8		        ld a, ivblock / 256 
f568 ed 47		        ld i, a 
f56a fb			        ei 
f56b			 
f56b			; This test loop goes on "forever" 
f56b			testloop: 
f56b 3e 00		        ld a, 0         ; reset interrupt indicator 
f56d 32 26 f8		        ld (gotint), a 
f570			 
f570			; test SIO channel A 
f570 cd 6f f4			call sel_a_sio 
f573 21 0c f0			ld hl, ver_msg 
f576 cd 01 f5			call print_string 
f579 21 90 f6			ld hl, tstop_msg 
f57c cd 01 f5			call print_string 
f57f 21 ab f6			ld hl, a_msg 
f582 cd 01 f5			call print_string 
f585 3e 00			ld a, 0 
f587 32 1f f8			ld (keyin), a 
f58a			nxt_a_key: 
f58a cd ea f4			call getkey	; test if any input character available 
f58d fe 03			cp CTRLC	; end the test 
f58f ca 86 f0			jp z,menu 
f592 b7				or a 
f593 ca a1 f5			jp z, no_more_a_keys 
f596 cd a7 f4			call putc 
f599 3e 01			ld a, 1 
f59b 32 1f f8			ld (keyin), a 
f59e c3 8a f5			jp nxt_a_key 
f5a1			no_more_a_keys: 
f5a1 3a 1f f8			ld a, (keyin) 
f5a4 b7				or a 
f5a5 ca ae f5			jp z, no_a_key 
f5a8 21 c5 f6			ld hl, a_in_msg 
f5ab cd 01 f5			call print_string 
f5ae			no_a_key: 
f5ae 3e 01			ld a,1		; one LED blink after sending on SIO A 
f5b0 cd 11 f5			call blink 
f5b3 3e 02			ld a,2 
f5b5 cd 21 f5			call delay 
f5b8			 
f5b8			; test SIO channel B 
f5b8 cd 7c f4			call sel_b_sio 
f5bb 21 0c f0			ld hl, ver_msg 
f5be cd 01 f5			call print_string 
f5c1 21 e2 f6			ld hl, b_msg 
f5c4 cd 01 f5			call print_string 
f5c7 3e 00			ld a, 0 
f5c9 32 1f f8			ld (keyin), a 
f5cc			nxt_b_key: 
f5cc cd ea f4			call getkey	; test if any input character available 
f5cf b7				or a 
f5d0 ca de f5			jp z, no_more_b_keys 
f5d3 cd a7 f4			call putc 
f5d6 3e 01			ld a, 1 
f5d8 32 1f f8			ld (keyin), a 
f5db c3 cc f5			jp nxt_b_key 
f5de			no_more_b_keys: 
f5de 3a 1f f8			ld a, (keyin) 
f5e1 b7				or a 
f5e2 ca eb f5			jp z, no_b_key 
f5e5 21 fc f6			ld hl, b_in_msg 
f5e8 cd 01 f5			call print_string 
f5eb			no_b_key: 
f5eb 3e 02			ld a, 2			; two LED blinks after sending on SIO B 
f5ed cd 11 f5			call blink 
f5f0 3e 02			ld a, 2 
f5f2 cd 21 f5			call delay 
f5f5			 
f5f5			; Test RAM 
f5f5 21 19 f7			ld hl, ram_tst_start 
f5f8 cd 6f f4			call sel_a_sio 
f5fb cd 01 f5			call print_string 
f5fe cd 7c f4			call sel_b_sio 
f601 cd 01 f5			call print_string 
f604 cd 53 f6			call test_ram 
f607 21 2e f7			ld hl, ram_tst_ok 
f60a 3a 24 f8			ld a,(ramerr)		; was there an error? 
f60d b7				or a 
f60e ca 14 f6			jp z, ram_prt	; no error 
f611 21 46 f7			ld hl, ram_tst_err 
f614			ram_prt: 
f614 cd 6f f4			call sel_a_sio 
f617 cd 01 f5			call print_string 
f61a cd 7c f4			call sel_b_sio 
f61d cd 01 f5			call print_string 
f620 3e 03			ld a, 3			; three LED blinks after testing RAM 
f622 cd 11 f5			call blink 
f625 3e 02			ld a, 2 
f627 cd 21 f5			call delay 
f62a			 
f62a			; Test if interupt recieved on SIO A 
f62a cd 6f f4		        call sel_a_sio 
f62d 21 80 f7		        ld hl, no_int_msg 
f630 3a 26 f8		        ld a, (gotint)  ; Interupt recieved? 
f633 b7			        or a 
f634 ca 3a f6		        jp z, prtinta    ; no 
f637 21 61 f7		        ld hl, int_msg 
f63a			prtinta: 
f63a cd 01 f5		        call print_string 
f63d			 
f63d			; Test if interupt recieved 
f63d cd 7c f4		        call sel_b_sio 
f640 21 80 f7		        ld hl, no_int_msg 
f643 3a 26 f8		        ld a, (gotint)  ; Interupt recieved? 
f646 b7			        or a 
f647 ca 4d f6		        jp z, prtintb    ; no 
f64a 21 61 f7		        ld hl, int_msg 
f64d			prtintb: 
f64d cd 01 f5		        call print_string 
f650			 
f650 c3 6b f5			jp testloop 
f653			 
f653			; test_ram: test RAM memory 
f653			test_ram: 
f653 3e 00			ld a, 0			; reset error flag 
f655 32 24 f8			ld (ramerr), a 
f658 d3 04			out (MEMLORAM), a	; select RAM in lower 32KB address range, LED on 
f65a 3e 05			ld a, 5			; test a couple of times 
f65c 32 25 f8			ld (tests), a 
f65f			tstlop: 
f65f 01 00 ef			ld bc, monitor - 0x0100	; number of bytes to test 
f662 21 00 01			ld hl, 0x0100		; start address of test 
f665			tstram: 
f665 1e 00			ld e, 0x00 
f667 73				ld (hl), e 
f668 7e				ld a, (hl) 
f669 bb				cp e 
f66a ca 72 f6			jp z, tstff 
f66d 3e 01			ld a, 1 
f66f 32 24 f8			ld (ramerr), a 
f672			tstff: 
f672 1e ff			ld e, 0xff 
f674 73				ld (hl), e 
f675 7e				ld a, (hl) 
f676 bb				cp e 
f677 ca 7f f6			jp z, tstnxt 
f67a 3e 01			ld a, 1 
f67c 32 24 f8			ld (ramerr), a 
f67f			tstnxt: 
f67f 23				inc hl 
f680 0b				dec bc 
f681 78				ld a, b 
f682 b1				or c 
f683 20 e0			jr nz, tstram 
f685 3a 25 f8			ld a, (tests) 
f688 3d				dec a 
f689 32 25 f8			ld (tests),a 
f68c b7				or a 
f68d 20 d0			jr nz, tstlop 
f68f c9				ret 
f690			 
f690			; Test messages 
f690			tstop_msg: 
f690 .. 00			db "press Ctrl-C to end test\r\n", 0 
f6ab			a_msg: 
f6ab .. 00			db "Output on SIO channel A\r\n", 0 
f6c5			a_in_msg: 
f6c5 .. 00			db " <- input on SIO channal A\r\n", 0 
f6e2			b_msg: 
f6e2 .. 00			db "Output on SIO channel B\r\n", 0 
f6fc			b_in_msg: 
f6fc .. 00			db " <- input on SIO channal B\r\n", 0 
f719			ram_tst_start: 
f719 .. 00			db "Testing RAM memory\r\n", 0 
f72e			ram_tst_ok: 
f72e .. 00			db "RAM memory test is ok\r\n", 0 
f746			ram_tst_err: 
f746 .. 00			db "Error in RAM memory test\r\n", 0 
f761			int_msg: 
f761 .. 00		        db "Interrupt from CTC channel 3\r\n", 0 
f780			no_int_msg: 
f780 .. 00		        db "No interupt from CTC channel 3\r\n", 0 
f7a1			 
f7a1			; Interupt routines, most are dummies for now 
f7a1			; CTC interupts for CH0 - CH2 not used 
f7a1			ctcint0: 
f7a1			ctcint1: 
f7a1			ctcint2: 
f7a1			; PIO interrupt routines, not used for now 
f7a1			piointa: 
f7a1			piointb: 
f7a1			; SIO interrupt routines, not used for now 
f7a1			siointa: 
f7a1			siointb: 
f7a1 fb			        ei 
f7a2 ed 4d		        reti 
f7a4			 
f7a4			; CTC interrupt for CH3 used to test interrupt 
f7a4			; sets indicator and outputs bit pattern on PIO ports 
f7a4			; then shifts the pattern left 
f7a4			ctcint3: 
f7a4 f5			        push af 
f7a5 3e 01		        ld a, 1 
f7a7 32 26 f8		        ld (gotint), a 
f7aa 3a 1e f8			ld a, (pio_out) 
f7ad d3 10			out (PIO_A_DATA), a 
f7af 07				rlca 
f7b0 32 1e f8			ld (pio_out), a 
f7b3 f1			        pop af 
f7b4 fb			        ei 
f7b5 ed 4d		        reti 
f7b7			 
f7b7			endofcode: 
f7b7			 
f7b7			; Interupt vectors for interupt mode 2 
f7b7			; make sure that the block is on an even 256 byte address 
f7b7			if endofcode & 0x00ff 
f7b7 0xff...		        ds 256 - (endofcode & 0x00ff), 0xff 
f800			endif 
f800			 
f800			ivblock: 
f800			; 
f800			; The SIO interupt vector block must be on 
f800			; an even 16 byte address if "status affects vector" is used 
f800			 
f800			sioiv: 
f800 a1 f7		        dw siointa 
f802 a1 f7		        dw siointa 
f804 a1 f7		        dw siointa 
f806 a1 f7		        dw siointa 
f808 a1 f7		        dw siointb 
f80a a1 f7		        dw siointb 
f80c a1 f7		        dw siointb 
f80e a1 f7		        dw siointb 
f810			 
f810			; The CTC interupt vector block must be on 
f810			; an even 8 byte address 
f810			ctciv: 
f810 a1 f7		        dw ctcint0 
f812 a1 f7		        dw ctcint1 
f814 a1 f7		        dw ctcint2 
f816 a4 f7		        dw ctcint3 
f818			 
f818			; The PIO interupt vectors must be on 
f818			; an even 2 byte address 
f818			pioaiv: 
f818 a1 f7		        dw piointa 
f81a			piobiv: 
f81a a1 f7		        dw piointb 
f81c			 
f81c			; Variables 
f81c			sio_ctrl: 
f81c 00				db 0 
f81d			sio_data: 
f81d 00				db 0 
f81e			pio_out: 
f81e 00				db 0 
f81f			keyin: 
f81f 00				db 0 
f820			loopcnt: 
f820 00 00			dw 0 
f822			ledblinks: 
f822 00				db 0 
f823			delays: 
f823 00				db 0 
f824			ramerr: 
f824 00				db 0 
f825			tests: 
f825 00				db 0 
f826			gotint: 
f826 00			        db 0 
f827			 
f827			xdebug: 
f827 00				db 0 
f828			 
f828			memptr: 
f828 00 00			dw 0 
f82a			 
f82a			xcsectno: 
f82a 00				db 0 
f82b			 
f82b			xlsectno: 
f82b 00				db 0 
f82c			 
f82c			xsectbuf: 
f82c 00...			ds 128 
f8ac			 
f8ac			; End of monitor code 
f8ac			monend: 
# End of file z80mon.z80
f8ac
