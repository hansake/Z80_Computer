; z80mon.z80
; Monitor for home built Z80 computer board
; can upload files to memory using Xmodem
; can also test memory, i/o devices and interrupts
;
; You are free to use, modify, and redistribute
; this source code. The software is provided "as is",
; without warranty of any kind.
; Hastily Cobbled Together 2021 by Hans-Ake Lund.
;
; The monitor program is uploaded from EPROM
; into high memory and executed there.

; Character definitions
;
EOS:		equ 0x00	; End Of String
CR:		equ 0x0d	; Carriage Return (ENTER)
LF:		equ 0x0a	; Line Feed
SPACE:		equ 0x20	; Space
TAB:		equ 0x09	; Tabulator
SOH:		equ 0x01	; Xmodem start of header
EOT:		equ 0x04	; Xmodem end of transfer
ACK:		equ 0x06	; Xmodem ACK
NAK:		equ 0x15	; Xmodem NAK
CTRLC:		equ 0x03	; Control-C

; Serial channel timeout loop counter
GETCTM:	equ 9000		; loop counter for ~1 sec timeout

; Port definitions for switching between low EPROM and RAM
MEMEPROM:	equ 0x00
MEMLORAM:	equ 0x04

; Port definitions for the SIO/0 chip
SIO_BASE:	equ 0x08
SIO_A_DATA:	equ SIO_BASE + 0 + 0
SIO_A_CTRL:	equ SIO_BASE + 0 + 2
SIO_B_DATA:	equ SIO_BASE + 1 + 0
SIO_B_CTRL:	equ SIO_BASE + 1 + 2

; Port definitions for the CTC chip
CTC_BASE:	equ 0x0c
CTC_CH0:	equ CTC_BASE + 0
CTC_CH1:	equ CTC_BASE + 1
CTC_CH2:	equ CTC_BASE + 2
CTC_CH3:	equ CTC_BASE + 3

; Port definitions for the PIO chip
PIO_BASE:	equ 0x10
PIO_A_DATA:	equ PIO_BASE + 0 + 0
PIO_A_CTRL:	equ PIO_BASE + 0 + 2
PIO_B_DATA:	equ PIO_BASE + 1 + 0
PIO_B_CTRL:	equ PIO_BASE + 1 + 2

; Port definitions for switching LED off and on
LEDOFF:		equ 0x14
LEDON:		equ 0x18

; The monitor program is copied to high RAM where it is executed
MONADR:	equ 0xf000

; The EPROM code is executed from here at start or reset
; if RAM code is uploaded it also starts to run here
; copying the monitor to upper memory
boot:
	ld de, monitor
	ld hl, moneprom
	ld bc, monend - monitor
	ldir
	jp monitor

; The NMI routine is on the fixed address 0x0066
nmipad:
	ds 0x66 - (nmipad - boot)
nmi:
	ex af,af'
	exx
	; do something here if needed
	jp nmipatch
nmipatch:
	exx
	ex af,af'
	retn
nmiend:

; The monitor program is copied from this address in the EPROM
; or RAM if uploaded
moneprom:
; The program starts here when copied from EPROM at boot
	org MONADR
monitor:
	jp startmon

; Fixed address for reload from EPROM: MONADR + 3
fixedreload:
	ld a, 00000011b		; sw reset CTC2 to stop NMIs
	out (CTC_CH2), a
	out (MEMEPROM), a	; select EPROM in lower 32KB address range
	jp 0x0000		; and jump to start of EPROM

; Messages to send on serial channels at start and test
ver_msg:
        db "Z80 computer board, z80mon version 1.6"
	include "mbuilt.z80"
	db "\r\n", 0

startmon:
	ld sp, 0x0000	; initialize stack pointer
			; first push or call will use 0xffff

	ld a,1		; one LED blink after initial start
	call blink
	ld a,3
	call delay

	call ctc_init
	ld a,2          ; two LED blinks after CTC init
	call blink
	ld a,3
	call delay

	call sio_init
	ld a,3          ; three LED blinks after SIO init
	call blink
	ld a,3
	call delay

	call pio_init
	ld a,4          ; four LED blinks after PIO init
	call blink
	ld a,3
	call delay

	; Boot menu

	ld a, 0
	ld (xdebug),a 
menu:
	di

	; Copy NMI code to RAM also
	ld hl, nmi
	ld de, monend
	ld bc, nmiend - nmi
	ldir
	out (MEMLORAM),a	; select RAM in lower 32KB address range
	ld hl, monend
	ld de, nmi
	ld bc, nmiend - nmi
	ldir

	call sel_a_sio
	ld hl, ver_msg
	call print_string
	ld hl, menu_msg
	call print_string
	call getc
	cp 't'		;test memory, i/o and interrupt
	jp z,testprog
	cp 'u'		;upload program to RAM address 0x0000 with Xmodem
	jp z,upload
	cp 'r'		;reload from EPROM
	jp z,reload
	cp 'g'		;run uploaded progran from ARM address 0x0000
	jp z,execute
	cp 'd'		;hidden command to test serial input delay
	jp z,cttest
	cp '0'		;hidden command to turn off x-modem debug (default)
	jp z,xdeboff
	cp '1'		;hidden command to turn on x-modem debug
	jp z,xdebon
	jp menu

xdeboff:
	ld a, 0
	ld (xdebug),a 
	jp menu
xdebon:
	ld a, 1
	ld (xdebug),a 
	jp menu

menu_msg:
	db "Press 't' to start test\r\n"
	db "      'u' to upload file to memory\r\n"
	db "      'r' to reload from EPROM\r\n"
	db "      'g' to execute (go) from RAM address 0x0000\r\n"
	db 0

; Upload file to RAM
upload:
	ld hl, upload_msg
	call print_string
	
	out (MEMLORAM),a	; select RAM in lower 32KB address range

; Xmodem recieve file and put in memory
; protocol description
;   http://pauillac.inria.fr/~doligez/zmodem/ymodem.txt
; (much of the code is proudly stolen from PCGET.ASM)
xupload:
	ld a, (xdebug)
	or a
	jr z, xnodebu0
	ld a, '\r'
	call dputc
	ld a, '\n'
	call dputc
	ld a, '0'
	call dputc
xnodebu0:

	; gobble up garbage characters from the line
xpurge:
	ld b, 1
	call getct
	jr c, xrecieve
	cp CTRLC		;Ctrl-C was recieved
	jp z, xabort
	jr xpurge		;loop until sender done

	; Recieve file and put in memory
xrecieve:
	ld hl, 0x0000		;where to start putting memory in RAM
	ld (memptr), hl

	ld a, 0			;initialize last sector number
	ld (xlsectno), a

	ld a, NAK		;send NAK
	call putc

	; Recieve header
xgethdr:
	ld a, (xdebug)
	or a
	jr z, xnodebu1
	ld a, '1'
	call dputc
xnodebu1:
	ld b, 3			;3 seconds timeout
	call getct
	jr nc, xgethchr		;no timeout, identify character in header

	; Header error or timeout
	; purge input characters and send NAK
xhdrerr:
	ld a, (xdebug)
	or a
	jr z, xnodebue
	ld a, 'e'
	call dputc
xnodebue:
	ld b, 1
	call getct
	jr nc, xhdrerr		;loop until sender done
	ld a, NAK
	call putc
	jr xgethdr		;try to get header again

	; Which type of header? SOH, EOT or Ctrl-C to abort
xgethchr:
	cp SOH
	jr z, xgotsoh
	cp CTRLC
	jp z, xabort
	cp EOT
	jp z, xgoteot
	jr xhdrerr

	; Got SOH header
xgotsoh:
	ld a, (xdebug)
	or a
	jr z, xnodebu2
	ld a, '2'
	call dputc
xnodebu2:

	ld b, 1
	call getct
	jr c, xhdrerr
	ld d, a			;sector number
	ld b, 1
	call getct
	jr c, xhdrerr
	cpl			;complement of block number
	cp d
	jr z, xgetsec		;good sector header, get sector
	jr xhdrerr

	; Get sector and put in temporary buffer
xgetsec:
	ld a, (xdebug)
	or a
	jr z, xnodebu3
	ld a, '3'
	call dputc
xnodebu3:

	ld a, d			
	ld (xcsectno), a	;current sector
	ld c, 0			;init checksum
	ld hl, xsectbuf		;temporary buffer for uploaded data
	ld d, 128		;sector length
xgetschar:
	ld b, 1
	call getct
	jr c, xhdrerr
	ld (hl), a		;store byte in memory
	add c			;calculate checksum
	ld c, a
	inc hl
	dec d
	jr nz, xgetschar

	; Verify the checksum
	ld d, c			;verify checksum
	ld b, 1
	call getct
	jr c, xhdrerr
	cp d
	jr nz, xhdrerr

	; Check that this sector number is last sector + 1
	ld a, (xcsectno)
	ld b, a
	ld a, (xlsectno)
	inc a
	cp b
	jr z, xwrtsec		;expected sector number ok

	; sender missed last ACK
	ld a, (xdebug)
	or a
	jr z, xnodebum
	ld a, 'm'
	call dputc
xnodebum:
	jr xsndack

	; got new sector, write it to memory
xwrtsec:	
	ld a, (xdebug)
	or a
	jr z, xnodebu4
	ld a, '4'
	call dputc
xnodebu4:

	ld a, (xcsectno)	;update sector number
	ld (xlsectno), a
	ld de, (memptr)		;where to put the uploaded data
	ld hl, xsectbuf		;from the recieve buffer
	ld bc, 128
xcpymem:
	ldir
	ld (memptr), de		;update the destination in memory
xsndack:
	ld a, ACK		;send ACK
	call putc
	jp xgethdr		;get next sector

	; Got EOT, upload finished
xgoteot:
	ld a, (xdebug)
	or a
	jr z, xnodebu5
	ld a, '5'
	call dputc
xnodebu5:

	ld a, ACK
	call putc

	; put ok indication in memory
	ld hl, MONADR
	dec hl
	ld a, 'K'
	ld (hl), a
	dec hl
	ld a, 'O'
	ld (hl), a
	
	;write message that upload was ok
	ld a,3			;wait a while first
	call delay
	ld hl, upcpl_msg
	call print_string

	jp menu

xabort:
	ld hl, uperr_msg	;write message that upload was interrupted
	call print_string
	jp menu

upload_msg:
	db "upload file using Xmodem\r\n", 0

upcpl_msg:
	db "upload complete\r\n", 0

uperr_msg:
	db "\r\nupload interrupted\r\n", 0

; Reload monitor from EPROM
reload:
	ld hl, reload_msg
	call print_string
	out (MEMEPROM), a	; select EPROM in lower 32KB address range
	jp 0x0000

reload_msg:
	db "reloading boot code from EPROM\r\n", 0

; Execute code in RAM
execute:
	out (MEMLORAM),a	; select RAM in lower 32KB address range
	ld hl, MONADR		; check if is code uploaded
	dec hl
	ld a, (hl)
	cp 'K'
	jr nz, noramprog
	dec hl
	ld a, (hl)
	cp 'O'
	jr nz, noramprog
	ld hl, execute_msg
	call print_string
	jp 0x0000
noramprog:
        ld hl, noramprog_msg
        call print_string
	jp menu

execute_msg:
	db "executing code from address 0x0000 in RAM\r\n", 0
noramprog_msg:
	db "no program code uploaded in RAM\r\n", 0

; Test serial input timeout
cttest:
	ld hl, cttest_msg
	call print_string

;calibrating the timeout
	ld c, '0'
tstloop:
	ld a, c
	call putc
	ld a, '.'
	call putc
	ld b,10		;10 seconds timeout
	call getct
	jp nc, menu
	inc c
	ld a, c
	cp '9' + 1
	jr nz, tstloop
	ld c, '0'
	ld a, '\r'
	call putc
	ld a, '\n'
	call putc
	jr tstloop

cttest_msg:
	db "testing serial input timeout, 10 sec between dots\r\n"
	db "press any key to stop test\r\n", 0

; Debug print character in reg A on channel B
dputc:
	call sel_b_sio
	call putc
	call sel_a_sio
	ret

; Routines to initialize and use i/o devices
;
; pio_init: initialize PIO channel A and B for output (Mode 0)
; affects: A
pio_init:
	;PIO A
	ld a, 00001111b		; mode 0
	out (PIO_A_CTRL), a
	ld a, 00000111b		; int disable
	out (PIO_A_CTRL), a
	;PIO B, SPI interface
	ld a, 11001111b		; mode 3
	out (PIO_B_CTRL), a
	ld a, 00000001b		; i/o mask
	;bit 0: MISO - input     3                   3
	;bit 1: MOSI - output    4                   5
	;bit 2: SCK  - output    5                   7
	;bit 3: /CS0 - output    6                   9
	;bit 4: /CS1 - output  extra device select  11
	;bit 5: /CS2 - output  extra device select  10
	;bit 6: TP1  - output  test point            8  (used to measure NMI handling time)
	;bit 7: TRA  - output  byte in transfer      6   signals that NMI routine is active
	;                                                with an 8 bit transmit or receive transfer
	out (PIO_B_CTRL), a
	ld a, 00000111b		; int disable
	out (PIO_B_CTRL), a
	ld a, 00111010b		;initialize output bits
	; bit 1: MOSI - output	;low
	; bit 2: SCK  - output	;low
	; bit 3: /CS0 - output	;high = not selected
	; bit 4: /CS1 - output	;high = not selected
	; bit 5: /CS2 - output	;high = not selected
	; bit 6: TP1  - output  ;low
	; bit 7: TRA  - output  ;low
	out (PIO_B_DATA), a
	ret

; Divide constant in CTC to get an approximate baudrate of 9600
; To get 9600 baud with a 4MHz xtal oscillator the divide constant
; should be 4000000/(9600*2*16) = 13.0208
; Using the CTC divider constant set to 13 will give a baud-rate
; of 4000000/(2*16*13) = 9615 baud which hopefully is close enough.
; This is tested and works with a 9600 baudrate connection to a Linux PC.
;
; (If this is not exact enough, another xtal oscillator must be selected,
; it should have the frequency: 3.6864 MHz
; The divide constant will then be set to 12 which gives the baudrate
; of 3686400/(2*16*12) = 9600 baud.)
BAUDDIV:	equ 13

; ctc_init: initializes the CTC channel 0 for baudrate clock to SIO/0
; initializes also CTC channels 1, 2 and 3
; input TRG0-2 is supplied by the BCLK signal which is the system clock
; divided by 2 by the ATF22V10C 
; affects: A
ctc_init:
	; CTC chan 0
	ld a, 01000111b		; int off, counter mode, prescaler don't care,
				; falling edge, time trigger don't care,
				; time constant follows, sw reset, 
				; this is a ctrl cmd
	out (CTC_CH0), a
	ld a, BAUDDIV		; divide constant to get baudrate
	out (CTC_CH0), a
        ; Interupt vector is written to chan 0
        ld a, ctciv & 0xf8      ; interupt vector for device
        out (CTC_CH0), a

	; CTC chan 1
	ld a, 01000111b		; int off, counter mode, prescaler don't care,
				; falling edge, time trigger don't care,
				; time constant follows, sw reset, 
				; this is a ctrl cmd
	out (CTC_CH1), a
	ld a, 10		; divide BCLK by 10
	out (CTC_CH1), a

	; CTC chan 2
	ld a, 00000011b		; sw reset, this is a ctrl cmd
	out (CTC_CH2), a

        ; CTC chan 3 setup
        ld a, 10110111b         ; int enabled, timer mode, prescaler 256,
                                ; rising edge, automatic time trigger,
                                ; time constant follows, sw reset,
                                ; this is a ctrl cmd
        out (CTC_CH3), a
        ld a, 156                ; divide CLK/(256 * 156) = ~100Hz
        out (CTC_CH3), a

	ret

; sio_init: initializes the SIO/0 for serial communication
; affects: HL, B, C
sio_init:
	; load B with number of bytes
	ld b, sio_init_data_end - sio_init_data
	ld hl, sio_init_data	; HL points to start of data
	ld c, SIO_A_CTRL	; I/O-port A for write
	otir			; block write of B bytes to [C] starting from HL

	; load B with number of bytes
	ld b, sio_init_data_end - sio_init_data
	ld hl, sio_init_data	; HL points to start of data
	ld c, SIO_B_CTRL	; I/O-port B for write
	otir			; block write of B bytes to [C] starting from HL

	ret

sio_init_data:
	db 00110000b		; write to WR0: error reset
	db 00011000b		; write to WR0: channel reset
	db 0x04, 01000100b	; write to WR4: clkx16, 1 stop bit, no parity
	db 0x05, 01101000b	; write to WR5: DTR inactive, enable TX 8bit,
				; BREAK off, TX on, RTS inactive
	db 0x01, 00000000b	; write to WR1: no interrupts enabled
	db 0x03, 11000001b	; write to WR3: enable RX 8bit
sio_init_data_end:

; sel_a_sio: selects SIO channel A for i/o
; affects: none
sel_a_sio:
	push af
	ld a, SIO_A_DATA
	ld (sio_data), a
	ld a, SIO_A_CTRL
	ld (sio_ctrl), a
	pop af
	ret

; sel_b_sio: selects SIO channel B for i/o
; affects: none
sel_b_sio:
	push af
	ld a, SIO_B_DATA
	ld (sio_data), a
	ld a, SIO_B_CTRL
	ld (sio_ctrl), a
	pop af
	ret

; tx_ready: waits for transmitt buffer to become empty
; affects: none
sio_tx_ready:
	push af
	push bc
sio_tx_ready_loop:
	ld a, (sio_ctrl)
	ld c, a
	in a, (c)		; read RR0
	bit 2, a		; check if bit 2 is set
	jr z, sio_tx_ready_loop	; if no - check again
	pop bc
	pop af
	ret

; rx_ready: waits for a character to become available
; affects: none
sio_rx_ready:
	push af
	push bc
sio_rx_ready_loop:	
	ld a, (sio_ctrl)
	ld c, a
	in a, (c)		; read RR0
	bit 0, a		; check if bit 0 is set
	jr z, sio_rx_ready_loop	; if no - rx buffer has no data => check again
	pop bc
	pop af
	ret

; sends byte in reg A	
; affects: none
putc:
	push bc
	push af
	call sio_tx_ready
	ld a, (sio_data)
	ld c, a
	pop af
	out (c), a		; write character
	pop bc
	ret

; getc: waits for a byte to be available and reads it
; returns: A - read byte
getc:
	push bc
	call sio_rx_ready	; wait until there is a character
	ld a, (sio_data)
	ld c, a
	in a, (c)		; read character
	pop bc
	ret

; getct: waits for a byte to be available with timeout and reads it
; reg B - timeout in seconds
; returns:
;   Carry = 1: timeout, Carry = 0: no timeout
;   reg A - read byte
getct:
	push bc
	push de
	ld de, GETCTM
getcloop:
	ld a, (sio_ctrl)
	ld c, a
	in a, (c)		; read RR0
	bit 0, a		; check if bit 0 is set
	jr nz, getchrin		; character available
	dec de
	ld a, d
	or e
	jr nz, getcloop		; inner loop
	djnz getcloop		; outer loop, number of seconds
	jr getcnochr		; timeout
getchrin:
	ld a, (sio_data)
	ld c, a
	in a, (c)		; read character
	pop de
	pop bc
	scf
	ccf			; Carry = 0, no timeout
	ret
getcnochr:
	ld a, 0
	pop de
	pop bc
	scf			; Carry = 1, timeout
	ret

; getkey: gets a byte if available and reads it
; returns: A - read byte or 0 if no byte available
getkey:
	push bc
	ld a, (sio_ctrl)
	ld c, a
	in a, (c)		; read RR0
	bit 0, a		; check if bit 0 is set
	jr z, no_key		; if no - rx buffer has no data => return 0
	ld a, (sio_data)
	ld c, a
	in a, (c)		; read character
	pop bc
	ret
no_key:
	ld a, 0
	pop bc
	ret

; print_string: prints a string which starts at adress HL
; and is terminated by EOS-character
; affects: none
print_string:
	push af
	push hl
print_string_1:
	ld a,(hl)		; load next character
	cp 0			; is it en End Of String - character?
	jr z, print_string_2	; yes - return
	call putc		; no - print character
	inc hl			; HL++
	jr print_string_1	; do it again
print_string_2:
	pop hl
	pop af
	ret

; blink: the blink routine blinks the MEMSEL LED
; the number of times to blink in register A
; Must run in upper 32KB memory

; Blink LED a number of times
; using: A
blink:
	ld (ledblinks),a
blinkloop:
	call blinkled
	ld a,(ledblinks)
	dec a
	ld (ledblinks),a
	ret z
	jr blinkloop

; Make delay wait a number of times
; using: A
delay:
	ld (delays),a
delayloop:
	call bdelay
	call bdelay
	ld a,(delays)
	dec a
	ld (delays),a
	ret z
	jr delayloop

; Blink LED once
blinkled:
	out (LEDON), a	; Green LED on
	call bdelay
	call bdelay
	ld a,0
	out (LEDOFF),a	; Green LED off
	call bdelay
	call bdelay
	ret

; Suitable delay for blinking LED and waiting
bdelay:
	push hl
	ld hl,8000	; number of loops to delay between blinks
	ld (loopcnt),hl
bdelayloop:
	ld hl,(loopcnt)
	dec hl
	ld a,h
	or l
	jp z,bleaveloop
	ld (loopcnt),hl
	jp bdelayloop
bleaveloop:
	pop hl
	ret

; The test program
testprog:
	ld a, 00010001b	; bit pattern to output on PIO A
	ld (pio_out),a 

; Initialize interupt mode 2 and enable interupt
        im 2
        ld a, ivblock / 256
        ld i, a
        ei

; This test loop goes on "forever"
testloop:
        ld a, 0         ; reset interrupt indicator
        ld (gotint), a

; test SIO channel A
	call sel_a_sio
	ld hl, ver_msg
	call print_string
	ld hl, tstop_msg
	call print_string
	ld hl, a_msg
	call print_string
	ld a, 0
	ld (keyin), a
nxt_a_key:
	call getkey	; test if any input character available
	cp CTRLC	; end the test
	jp z,menu
	or a
	jp z, no_more_a_keys
	call putc
	ld a, 1
	ld (keyin), a
	jp nxt_a_key
no_more_a_keys:
	ld a, (keyin)
	or a
	jp z, no_a_key
	ld hl, a_in_msg
	call print_string
no_a_key:
	ld a,1		; one LED blink after sending on SIO A
	call blink
	ld a,2
	call delay

; test SIO channel B
	call sel_b_sio
	ld hl, ver_msg
	call print_string
	ld hl, b_msg
	call print_string
	ld a, 0
	ld (keyin), a
nxt_b_key:
	call getkey	; test if any input character available
	or a
	jp z, no_more_b_keys
	call putc
	ld a, 1
	ld (keyin), a
	jp nxt_b_key
no_more_b_keys:
	ld a, (keyin)
	or a
	jp z, no_b_key
	ld hl, b_in_msg
	call print_string
no_b_key:
	ld a, 2			; two LED blinks after sending on SIO B
	call blink
	ld a, 2
	call delay

; Test RAM
	ld hl, ram_tst_start
	call sel_a_sio
	call print_string
	call sel_b_sio
	call print_string
	call test_ram
	ld hl, ram_tst_ok
	ld a,(ramerr)		; was there an error?
	or a
	jp z, ram_prt	; no error
	ld hl, ram_tst_err
ram_prt:
	call sel_a_sio
	call print_string
	call sel_b_sio
	call print_string
	ld a, 3			; three LED blinks after testing RAM
	call blink
	ld a, 2
	call delay

; Test if interupt recieved on SIO A
        call sel_a_sio
        ld hl, no_int_msg
        ld a, (gotint)  ; Interupt recieved?
        or a
        jp z, prtinta    ; no
        ld hl, int_msg
prtinta:
        call print_string

; Test if interupt recieved
        call sel_b_sio
        ld hl, no_int_msg
        ld a, (gotint)  ; Interupt recieved?
        or a
        jp z, prtintb    ; no
        ld hl, int_msg
prtintb:
        call print_string

	jp testloop

; test_ram: test RAM memory
test_ram:
	ld a, 0			; reset error flag
	ld (ramerr), a
	out (MEMLORAM), a	; select RAM in lower 32KB address range, LED on
	ld a, 5			; test a couple of times
	ld (tests), a
tstlop:
	ld bc, monitor - 0x0100	; number of bytes to test
	ld hl, 0x0100		; start address of test
tstram:
	ld e, 0x00
	ld (hl), e
	ld a, (hl)
	cp e
	jp z, tstff
	ld a, 1
	ld (ramerr), a
tstff:
	ld e, 0xff
	ld (hl), e
	ld a, (hl)
	cp e
	jp z, tstnxt
	ld a, 1
	ld (ramerr), a
tstnxt:
	inc hl
	dec bc
	ld a, b
	or c
	jr nz, tstram
	ld a, (tests)
	dec a
	ld (tests),a
	or a
	jr nz, tstlop
	ret

; Test messages
tstop_msg:
	db "press Ctrl-C to end test\r\n", 0
a_msg:
	db "Output on SIO channel A\r\n", 0
a_in_msg:
	db " <- input on SIO channal A\r\n", 0
b_msg:
	db "Output on SIO channel B\r\n", 0
b_in_msg:
	db " <- input on SIO channal B\r\n", 0
ram_tst_start:
	db "Testing RAM memory\r\n", 0
ram_tst_ok:
	db "RAM memory test is ok\r\n", 0
ram_tst_err:
	db "Error in RAM memory test\r\n", 0
int_msg:
        db "Interrupt from CTC channel 3\r\n", 0
no_int_msg:
        db "No interupt from CTC channel 3\r\n", 0

; Interupt routines, most are dummies for now
; CTC interupts for CH0 - CH2 not used
ctcint0:
ctcint1:
ctcint2:
; PIO interrupt routines, not used for now
piointa:
piointb:
; SIO interrupt routines, not used for now
siointa:
siointb:
        ei
        reti

; CTC interrupt for CH3 used to test interrupt
; sets indicator and outputs bit pattern on PIO ports
; then shifts the pattern left
ctcint3:
        push af
        ld a, 1
        ld (gotint), a
	ld a, (pio_out)
	out (PIO_A_DATA), a
	rlca
	ld (pio_out), a
        pop af
        ei
        reti

endofcode:

; Interupt vectors for interupt mode 2
; make sure that the block is on an even 256 byte address
if endofcode & 0x00ff
        ds 256 - (endofcode & 0x00ff), 0xff
endif

ivblock:
;
; The SIO interupt vector block must be on
; an even 16 byte address if "status affects vector" is used

sioiv:
        dw siointa
        dw siointa
        dw siointa
        dw siointa
        dw siointb
        dw siointb
        dw siointb
        dw siointb

; The CTC interupt vector block must be on
; an even 8 byte address
ctciv:
        dw ctcint0
        dw ctcint1
        dw ctcint2
        dw ctcint3

; The PIO interupt vectors must be on
; an even 2 byte address
pioaiv:
        dw piointa
piobiv:
        dw piointb

; Variables
sio_ctrl:
	db 0
sio_data:
	db 0
pio_out:
	db 0
keyin:
	db 0
loopcnt:
	dw 0
ledblinks:
	db 0
delays:
	db 0
ramerr:
	db 0
tests:
	db 0
gotint:
        db 0

xdebug:
	db 0

memptr:
	dw 0

xcsectno:
	db 0

xlsectno:
	db 0

xsectbuf:
	ds 128

; End of monitor code
monend:
